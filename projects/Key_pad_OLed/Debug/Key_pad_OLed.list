
Key_pad_OLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002870  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013bc  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d38  08003d38  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003d38  08003d38  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d38  08003d38  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000014  08003d54  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08003d54  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000754e  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001619  00000000  00000000  0002758b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  00028ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  00029370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b6d  00000000  00000000  00029aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ae5  00000000  00000000  00040615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081754  00000000  00000000  0004a0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb84e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed4  00000000  00000000  000cb8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002964 	.word	0x08002964

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002964 	.word	0x08002964

0800014c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	//call methods
	/////
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000150:	2201      	movs	r2, #1
 8000152:	2110      	movs	r1, #16
 8000154:	4816      	ldr	r0, [pc, #88]	; (80001b0 <main+0x64>)
 8000156:	f001 fa2a 	bl	80015ae <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800015a:	2201      	movs	r2, #1
 800015c:	2120      	movs	r1, #32
 800015e:	4814      	ldr	r0, [pc, #80]	; (80001b0 <main+0x64>)
 8000160:	f001 fa25 	bl	80015ae <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000164:	2201      	movs	r2, #1
 8000166:	2140      	movs	r1, #64	; 0x40
 8000168:	4811      	ldr	r0, [pc, #68]	; (80001b0 <main+0x64>)
 800016a:	f001 fa20 	bl	80015ae <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	2180      	movs	r1, #128	; 0x80
 8000172:	480f      	ldr	r0, [pc, #60]	; (80001b0 <main+0x64>)
 8000174:	f001 fa1b 	bl	80015ae <HAL_GPIO_WritePin>
 ///////////////
	HAL_Init();
 8000178:	f000 feea 	bl	8000f50 <HAL_Init>
	SystemClock_Config();
 800017c:	f000 f81e 	bl	80001bc <SystemClock_Config>
	MX_GPIO_Init();
 8000180:	f000 f886 	bl	8000290 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000184:	f000 f856 	bl	8000234 <MX_I2C1_Init>
	SSD1306_Init();
 8000188:	f000 fb3e 	bl	8000808 <SSD1306_Init>
	SSD1306_GotoXY (0,0);
 800018c:	2100      	movs	r1, #0
 800018e:	2000      	movs	r0, #0
 8000190:	f000 fca2 	bl	8000ad8 <SSD1306_GotoXY>
	SSD1306_Puts ("KEY-PAD", &Font_16x26, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	4907      	ldr	r1, [pc, #28]	; (80001b4 <main+0x68>)
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <main+0x6c>)
 800019a:	f000 fd33 	bl	8000c04 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800019e:	f000 fbf7 	bl	8000990 <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 ff35 	bl	8001014 <HAL_Delay>
	SSD1306_Clear();
 80001aa:	f000 fd50 	bl	8000c4e <SSD1306_Clear>


	while (1)
 80001ae:	e7fe      	b.n	80001ae <main+0x62>
 80001b0:	40010800 	.word	0x40010800
 80001b4:	20000000 	.word	0x20000000
 80001b8:	0800297c 	.word	0x0800297c

080001bc <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	; 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 fbc2 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001de:	2302      	movs	r3, #2
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e6:	2310      	movs	r3, #16
 80001e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ea:	2300      	movs	r3, #0
 80001ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 ff84 	bl	8002100 <HAL_RCC_OscConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001fe:	f000 fafd 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000202:	230f      	movs	r3, #15
 8000204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 f9f2 	bl	8002604 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000226:	f000 fae9 	bl	80007fc <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	; 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <MX_I2C1_Init+0x50>)
 800023a:	4a13      	ldr	r2, [pc, #76]	; (8000288 <MX_I2C1_Init+0x54>)
 800023c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_I2C1_Init+0x50>)
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <MX_I2C1_Init+0x58>)
 8000242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <MX_I2C1_Init+0x50>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_I2C1_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <MX_I2C1_Init+0x50>)
 8000252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <MX_I2C1_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <MX_I2C1_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <MX_I2C1_Init+0x50>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <MX_I2C1_Init+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <MX_I2C1_Init+0x50>)
 8000272:	f001 f9cd 	bl	8001610 <HAL_I2C_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800027c:	f000 fabe 	bl	80007fc <Error_Handler>
  }


}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000048 	.word	0x20000048
 8000288:	40005400 	.word	0x40005400
 800028c:	00061a80 	.word	0x00061a80

08000290 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	4b2d      	ldr	r3, [pc, #180]	; (800035c <MX_GPIO_Init+0xcc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a2c      	ldr	r2, [pc, #176]	; (800035c <MX_GPIO_Init+0xcc>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b2a      	ldr	r3, [pc, #168]	; (800035c <MX_GPIO_Init+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002bc:	4b27      	ldr	r3, [pc, #156]	; (800035c <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a26      	ldr	r2, [pc, #152]	; (800035c <MX_GPIO_Init+0xcc>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b24      	ldr	r3, [pc, #144]	; (800035c <MX_GPIO_Init+0xcc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0308 	and.w	r3, r3, #8
 80002d0:	603b      	str	r3, [r7, #0]
 80002d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	21f0      	movs	r1, #240	; 0xf0
 80002d8:	4821      	ldr	r0, [pc, #132]	; (8000360 <MX_GPIO_Init+0xd0>)
 80002da:	f001 f968 	bl	80015ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80002de:	230f      	movs	r3, #15
 80002e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002e2:	4b20      	ldr	r3, [pc, #128]	; (8000364 <MX_GPIO_Init+0xd4>)
 80002e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	4619      	mov	r1, r3
 80002f0:	481b      	ldr	r0, [pc, #108]	; (8000360 <MX_GPIO_Init+0xd0>)
 80002f2:	f000 ffc1 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80002f6:	23f0      	movs	r3, #240	; 0xf0
 80002f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fa:	2301      	movs	r3, #1
 80002fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000302:	2302      	movs	r3, #2
 8000304:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	4814      	ldr	r0, [pc, #80]	; (8000360 <MX_GPIO_Init+0xd0>)
 800030e:	f000 ffb3 	bl	8001278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	2006      	movs	r0, #6
 8000318:	f000 ff77 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800031c:	2006      	movs	r0, #6
 800031e:	f000 ff90 	bl	8001242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2100      	movs	r1, #0
 8000326:	2007      	movs	r0, #7
 8000328:	f000 ff6f 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800032c:	2007      	movs	r0, #7
 800032e:	f000 ff88 	bl	8001242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2100      	movs	r1, #0
 8000336:	2008      	movs	r0, #8
 8000338:	f000 ff67 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800033c:	2008      	movs	r0, #8
 800033e:	f000 ff80 	bl	8001242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	2100      	movs	r1, #0
 8000346:	2009      	movs	r0, #9
 8000348:	f000 ff5f 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800034c:	2009      	movs	r0, #9
 800034e:	f000 ff78 	bl	8001242 <HAL_NVIC_EnableIRQ>

}
 8000352:	bf00      	nop
 8000354:	3718      	adds	r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	40010800 	.word	0x40010800
 8000364:	10110000 	.word	0x10110000

08000368 <HAL_GPIO_EXTI_Callback>:
/////////////////////
////////////////////


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8000372:	f000 fe45 	bl	8001000 <HAL_GetTick>
 8000376:	4603      	mov	r3, r0
 8000378:	4aad      	ldr	r2, [pc, #692]	; (8000630 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800037a:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 800037c:	4bac      	ldr	r3, [pc, #688]	; (8000630 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	4bac      	ldr	r3, [pc, #688]	; (8000634 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	2b0a      	cmp	r3, #10
 8000388:	f240 821e 	bls.w	80007c8 <HAL_GPIO_EXTI_Callback+0x460>
    /*Configure GPIO pins : PA0 PA1 PA2 PA3 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800038c:	4baa      	ldr	r3, [pc, #680]	; (8000638 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800038e:	220f      	movs	r2, #15
 8000390:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000392:	4ba9      	ldr	r3, [pc, #676]	; (8000638 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000398:	4ba7      	ldr	r3, [pc, #668]	; (8000638 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	4ba6      	ldr	r3, [pc, #664]	; (8000638 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80003a4:	49a4      	ldr	r1, [pc, #656]	; (8000638 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80003a6:	48a5      	ldr	r0, [pc, #660]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80003a8:	f000 ff66 	bl	8001278 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	48a2      	ldr	r0, [pc, #648]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80003b2:	f001 f8fc 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2120      	movs	r1, #32
 80003ba:	48a0      	ldr	r0, [pc, #640]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80003bc:	f001 f8f7 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	489d      	ldr	r0, [pc, #628]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80003c6:	f001 f8f2 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	489b      	ldr	r0, [pc, #620]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80003d0:	f001 f8ed 	bl	80015ae <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) //PIN-4,PIN-0 =key 1
 80003d4:	88fb      	ldrh	r3, [r7, #6]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d114      	bne.n	8000404 <HAL_GPIO_EXTI_Callback+0x9c>
 80003da:	2101      	movs	r1, #1
 80003dc:	4897      	ldr	r0, [pc, #604]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80003de:	f001 f8cf 	bl	8001580 <HAL_GPIO_ReadPin>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d00d      	beq.n	8000404 <HAL_GPIO_EXTI_Callback+0x9c>
    {
    	        SSD1306_Clear();
 80003e8:	f000 fc31 	bl	8000c4e <SSD1306_Clear>
    	        SSD1306_GotoXY (0,0);
 80003ec:	2100      	movs	r1, #0
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 fb72 	bl	8000ad8 <SSD1306_GotoXY>
    		    SSD1306_Puts ("1", &Font_16x26, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	4992      	ldr	r1, [pc, #584]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80003f8:	4892      	ldr	r0, [pc, #584]	; (8000644 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80003fa:	f000 fc03 	bl	8000c04 <SSD1306_Puts>
    		    SSD1306_UpdateScreen();
 80003fe:	f000 fac7 	bl	8000990 <SSD1306_UpdateScreen>
 8000402:	e046      	b.n	8000492 <HAL_GPIO_EXTI_Callback+0x12a>



    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))//PIN-4,PIN-1 =key 4
 8000404:	88fb      	ldrh	r3, [r7, #6]
 8000406:	2b02      	cmp	r3, #2
 8000408:	d114      	bne.n	8000434 <HAL_GPIO_EXTI_Callback+0xcc>
 800040a:	2102      	movs	r1, #2
 800040c:	488b      	ldr	r0, [pc, #556]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800040e:	f001 f8b7 	bl	8001580 <HAL_GPIO_ReadPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d00d      	beq.n	8000434 <HAL_GPIO_EXTI_Callback+0xcc>
    {
    	SSD1306_Clear();
 8000418:	f000 fc19 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 800041c:	2100      	movs	r1, #0
 800041e:	2000      	movs	r0, #0
 8000420:	f000 fb5a 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("4", &Font_16x26, 1);
 8000424:	2201      	movs	r2, #1
 8000426:	4986      	ldr	r1, [pc, #536]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000428:	4887      	ldr	r0, [pc, #540]	; (8000648 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800042a:	f000 fbeb 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 800042e:	f000 faaf 	bl	8000990 <SSD1306_UpdateScreen>
 8000432:	e02e      	b.n	8000492 <HAL_GPIO_EXTI_Callback+0x12a>

    }
    else if(GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) //PIN-4,PIN-2 key 7
 8000434:	88fb      	ldrh	r3, [r7, #6]
 8000436:	2b04      	cmp	r3, #4
 8000438:	d114      	bne.n	8000464 <HAL_GPIO_EXTI_Callback+0xfc>
 800043a:	2104      	movs	r1, #4
 800043c:	487f      	ldr	r0, [pc, #508]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800043e:	f001 f89f 	bl	8001580 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00d      	beq.n	8000464 <HAL_GPIO_EXTI_Callback+0xfc>
    {
    	SSD1306_Clear();
 8000448:	f000 fc01 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 800044c:	2100      	movs	r1, #0
 800044e:	2000      	movs	r0, #0
 8000450:	f000 fb42 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("7", &Font_16x26, 1);
 8000454:	2201      	movs	r2, #1
 8000456:	497a      	ldr	r1, [pc, #488]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000458:	487c      	ldr	r0, [pc, #496]	; (800064c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800045a:	f000 fbd3 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 800045e:	f000 fa97 	bl	8000990 <SSD1306_UpdateScreen>
 8000462:	e016      	b.n	8000492 <HAL_GPIO_EXTI_Callback+0x12a>

    }
    else if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)) //pin-4,pin-3 key *
 8000464:	88fb      	ldrh	r3, [r7, #6]
 8000466:	2b08      	cmp	r3, #8
 8000468:	d113      	bne.n	8000492 <HAL_GPIO_EXTI_Callback+0x12a>
 800046a:	2108      	movs	r1, #8
 800046c:	4873      	ldr	r0, [pc, #460]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800046e:	f001 f887 	bl	8001580 <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00c      	beq.n	8000492 <HAL_GPIO_EXTI_Callback+0x12a>
    {

    	     SSD1306_Clear();
 8000478:	f000 fbe9 	bl	8000c4e <SSD1306_Clear>
    	     SSD1306_GotoXY (0,0);
 800047c:	2100      	movs	r1, #0
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fb2a 	bl	8000ad8 <SSD1306_GotoXY>
    	     SSD1306_Puts ("*", &Font_16x26, 1);
 8000484:	2201      	movs	r2, #1
 8000486:	496e      	ldr	r1, [pc, #440]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000488:	4871      	ldr	r0, [pc, #452]	; (8000650 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800048a:	f000 fbbb 	bl	8000c04 <SSD1306_Puts>
    	     SSD1306_UpdateScreen();
 800048e:	f000 fa7f 	bl	8000990 <SSD1306_UpdateScreen>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2110      	movs	r1, #16
 8000496:	4869      	ldr	r0, [pc, #420]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000498:	f001 f889 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800049c:	2201      	movs	r2, #1
 800049e:	2120      	movs	r1, #32
 80004a0:	4866      	ldr	r0, [pc, #408]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80004a2:	f001 f884 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2140      	movs	r1, #64	; 0x40
 80004aa:	4864      	ldr	r0, [pc, #400]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80004ac:	f001 f87f 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4861      	ldr	r0, [pc, #388]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80004b6:	f001 f87a 	bl	80015ae <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))//pin-5,pin-0 key 2
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d114      	bne.n	80004ea <HAL_GPIO_EXTI_Callback+0x182>
 80004c0:	2101      	movs	r1, #1
 80004c2:	485e      	ldr	r0, [pc, #376]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80004c4:	f001 f85c 	bl	8001580 <HAL_GPIO_ReadPin>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d00d      	beq.n	80004ea <HAL_GPIO_EXTI_Callback+0x182>
    {
    	SSD1306_Clear();
 80004ce:	f000 fbbe 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 80004d2:	2100      	movs	r1, #0
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 faff 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("2", &Font_16x26, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	4958      	ldr	r1, [pc, #352]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80004de:	485d      	ldr	r0, [pc, #372]	; (8000654 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80004e0:	f000 fb90 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 80004e4:	f000 fa54 	bl	8000990 <SSD1306_UpdateScreen>
 80004e8:	e046      	b.n	8000578 <HAL_GPIO_EXTI_Callback+0x210>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d114      	bne.n	800051a <HAL_GPIO_EXTI_Callback+0x1b2>
 80004f0:	2102      	movs	r1, #2
 80004f2:	4852      	ldr	r0, [pc, #328]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80004f4:	f001 f844 	bl	8001580 <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00d      	beq.n	800051a <HAL_GPIO_EXTI_Callback+0x1b2>
    {

    	  SSD1306_Clear();
 80004fe:	f000 fba6 	bl	8000c4e <SSD1306_Clear>
    	  SSD1306_GotoXY (0,0);
 8000502:	2100      	movs	r1, #0
 8000504:	2000      	movs	r0, #0
 8000506:	f000 fae7 	bl	8000ad8 <SSD1306_GotoXY>
    	  SSD1306_Puts ("5", &Font_16x26, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	494c      	ldr	r1, [pc, #304]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800050e:	4852      	ldr	r0, [pc, #328]	; (8000658 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000510:	f000 fb78 	bl	8000c04 <SSD1306_Puts>
    	  SSD1306_UpdateScreen();
 8000514:	f000 fa3c 	bl	8000990 <SSD1306_UpdateScreen>
 8000518:	e02e      	b.n	8000578 <HAL_GPIO_EXTI_Callback+0x210>
    }
    else if(GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d114      	bne.n	800054a <HAL_GPIO_EXTI_Callback+0x1e2>
 8000520:	2104      	movs	r1, #4
 8000522:	4846      	ldr	r0, [pc, #280]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000524:	f001 f82c 	bl	8001580 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d00d      	beq.n	800054a <HAL_GPIO_EXTI_Callback+0x1e2>
    {

    	SSD1306_Clear();
 800052e:	f000 fb8e 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 8000532:	2100      	movs	r1, #0
 8000534:	2000      	movs	r0, #0
 8000536:	f000 facf 	bl	8000ad8 <SSD1306_GotoXY>
        SSD1306_Puts ("8", &Font_16x26, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	4940      	ldr	r1, [pc, #256]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800053e:	4847      	ldr	r0, [pc, #284]	; (800065c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000540:	f000 fb60 	bl	8000c04 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 8000544:	f000 fa24 	bl	8000990 <SSD1306_UpdateScreen>
 8000548:	e016      	b.n	8000578 <HAL_GPIO_EXTI_Callback+0x210>
    }
    else if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	2b08      	cmp	r3, #8
 800054e:	d113      	bne.n	8000578 <HAL_GPIO_EXTI_Callback+0x210>
 8000550:	2108      	movs	r1, #8
 8000552:	483a      	ldr	r0, [pc, #232]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000554:	f001 f814 	bl	8001580 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00c      	beq.n	8000578 <HAL_GPIO_EXTI_Callback+0x210>
    {
    	SSD1306_Clear();
 800055e:	f000 fb76 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 8000562:	2100      	movs	r1, #0
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fab7 	bl	8000ad8 <SSD1306_GotoXY>
        SSD1306_Puts ("0", &Font_16x26, 1);
 800056a:	2201      	movs	r2, #1
 800056c:	4934      	ldr	r1, [pc, #208]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800056e:	483c      	ldr	r0, [pc, #240]	; (8000660 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000570:	f000 fb48 	bl	8000c04 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 8000574:	f000 fa0c 	bl	8000990 <SSD1306_UpdateScreen>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2110      	movs	r1, #16
 800057c:	482f      	ldr	r0, [pc, #188]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800057e:	f001 f816 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	482d      	ldr	r0, [pc, #180]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000588:	f001 f811 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	482a      	ldr	r0, [pc, #168]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000592:	f001 f80c 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	4828      	ldr	r0, [pc, #160]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800059c:	f001 f807 	bl	80015ae <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) //pin-6 pin-0 key 3
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d114      	bne.n	80005d0 <HAL_GPIO_EXTI_Callback+0x268>
 80005a6:	2101      	movs	r1, #1
 80005a8:	4824      	ldr	r0, [pc, #144]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80005aa:	f000 ffe9 	bl	8001580 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00d      	beq.n	80005d0 <HAL_GPIO_EXTI_Callback+0x268>
    {
    	       SSD1306_Clear();
 80005b4:	f000 fb4b 	bl	8000c4e <SSD1306_Clear>
    	       SSD1306_GotoXY (0,0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fa8c 	bl	8000ad8 <SSD1306_GotoXY>
    	       SSD1306_Puts ("3", &Font_16x26, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	491f      	ldr	r1, [pc, #124]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80005c4:	4827      	ldr	r0, [pc, #156]	; (8000664 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80005c6:	f000 fb1d 	bl	8000c04 <SSD1306_Puts>
    	       SSD1306_UpdateScreen();
 80005ca:	f000 f9e1 	bl	8000990 <SSD1306_UpdateScreen>
 80005ce:	e066      	b.n	800069e <HAL_GPIO_EXTI_Callback+0x336>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d114      	bne.n	8000600 <HAL_GPIO_EXTI_Callback+0x298>
 80005d6:	2102      	movs	r1, #2
 80005d8:	4818      	ldr	r0, [pc, #96]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80005da:	f000 ffd1 	bl	8001580 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00d      	beq.n	8000600 <HAL_GPIO_EXTI_Callback+0x298>
    {
    	SSD1306_Clear();
 80005e4:	f000 fb33 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 80005e8:	2100      	movs	r1, #0
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fa74 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("6", &Font_16x26, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	4913      	ldr	r1, [pc, #76]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80005f4:	481c      	ldr	r0, [pc, #112]	; (8000668 <HAL_GPIO_EXTI_Callback+0x300>)
 80005f6:	f000 fb05 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 80005fa:	f000 f9c9 	bl	8000990 <SSD1306_UpdateScreen>
 80005fe:	e04e      	b.n	800069e <HAL_GPIO_EXTI_Callback+0x336>
    }
    else if(GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	2b04      	cmp	r3, #4
 8000604:	d134      	bne.n	8000670 <HAL_GPIO_EXTI_Callback+0x308>
 8000606:	2104      	movs	r1, #4
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800060a:	f000 ffb9 	bl	8001580 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d02d      	beq.n	8000670 <HAL_GPIO_EXTI_Callback+0x308>
    {
    	SSD1306_Clear();
 8000614:	f000 fb1b 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fa5c 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("9", &Font_16x26, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	4907      	ldr	r1, [pc, #28]	; (8000640 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000624:	4811      	ldr	r0, [pc, #68]	; (800066c <HAL_GPIO_EXTI_Callback+0x304>)
 8000626:	f000 faed 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 800062a:	f000 f9b1 	bl	8000990 <SSD1306_UpdateScreen>
 800062e:	e036      	b.n	800069e <HAL_GPIO_EXTI_Callback+0x336>
 8000630:	20000044 	.word	0x20000044
 8000634:	20000040 	.word	0x20000040
 8000638:	20000030 	.word	0x20000030
 800063c:	40010800 	.word	0x40010800
 8000640:	20000000 	.word	0x20000000
 8000644:	08002984 	.word	0x08002984
 8000648:	08002988 	.word	0x08002988
 800064c:	0800298c 	.word	0x0800298c
 8000650:	08002990 	.word	0x08002990
 8000654:	08002994 	.word	0x08002994
 8000658:	08002998 	.word	0x08002998
 800065c:	0800299c 	.word	0x0800299c
 8000660:	080029a0 	.word	0x080029a0
 8000664:	080029a4 	.word	0x080029a4
 8000668:	080029a8 	.word	0x080029a8
 800066c:	080029ac 	.word	0x080029ac
    }
    else if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	2b08      	cmp	r3, #8
 8000674:	d113      	bne.n	800069e <HAL_GPIO_EXTI_Callback+0x336>
 8000676:	2108      	movs	r1, #8
 8000678:	4855      	ldr	r0, [pc, #340]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 800067a:	f000 ff81 	bl	8001580 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00c      	beq.n	800069e <HAL_GPIO_EXTI_Callback+0x336>
    {
    	SSD1306_Clear();
 8000684:	f000 fae3 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 8000688:	2100      	movs	r1, #0
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fa24 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("#", &Font_16x26, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4950      	ldr	r1, [pc, #320]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x46c>)
 8000694:	4850      	ldr	r0, [pc, #320]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x470>)
 8000696:	f000 fab5 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 800069a:	f000 f979 	bl	8000990 <SSD1306_UpdateScreen>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	484b      	ldr	r0, [pc, #300]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 80006a4:	f000 ff83 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	4848      	ldr	r0, [pc, #288]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 80006ae:	f000 ff7e 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2140      	movs	r1, #64	; 0x40
 80006b6:	4846      	ldr	r0, [pc, #280]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 80006b8:	f000 ff79 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	4843      	ldr	r0, [pc, #268]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 80006c2:	f000 ff74 	bl	80015ae <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) //pin-7 pin-0 key F1
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d114      	bne.n	80006f6 <HAL_GPIO_EXTI_Callback+0x38e>
 80006cc:	2101      	movs	r1, #1
 80006ce:	4840      	ldr	r0, [pc, #256]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 80006d0:	f000 ff56 	bl	8001580 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00d      	beq.n	80006f6 <HAL_GPIO_EXTI_Callback+0x38e>
    {
    	SSD1306_Clear();
 80006da:	f000 fab8 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 f9f9 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("F1", &Font_16x26, 1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	493a      	ldr	r1, [pc, #232]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x46c>)
 80006ea:	483c      	ldr	r0, [pc, #240]	; (80007dc <HAL_GPIO_EXTI_Callback+0x474>)
 80006ec:	f000 fa8a 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 80006f0:	f000 f94e 	bl	8000990 <SSD1306_UpdateScreen>
 80006f4:	e046      	b.n	8000784 <HAL_GPIO_EXTI_Callback+0x41c>
    }
    else if(GPIO_Pin == GPIO_PIN_1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d114      	bne.n	8000726 <HAL_GPIO_EXTI_Callback+0x3be>
 80006fc:	2102      	movs	r1, #2
 80006fe:	4834      	ldr	r0, [pc, #208]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 8000700:	f000 ff3e 	bl	8001580 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00d      	beq.n	8000726 <HAL_GPIO_EXTI_Callback+0x3be>
    {
    	SSD1306_Clear();
 800070a:	f000 faa0 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 800070e:	2100      	movs	r1, #0
 8000710:	2000      	movs	r0, #0
 8000712:	f000 f9e1 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("F2", &Font_16x26, 1);
 8000716:	2201      	movs	r2, #1
 8000718:	492e      	ldr	r1, [pc, #184]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x46c>)
 800071a:	4831      	ldr	r0, [pc, #196]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x478>)
 800071c:	f000 fa72 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 8000720:	f000 f936 	bl	8000990 <SSD1306_UpdateScreen>
 8000724:	e02e      	b.n	8000784 <HAL_GPIO_EXTI_Callback+0x41c>
    }
    else if(GPIO_Pin == GPIO_PIN_2 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2b04      	cmp	r3, #4
 800072a:	d114      	bne.n	8000756 <HAL_GPIO_EXTI_Callback+0x3ee>
 800072c:	2104      	movs	r1, #4
 800072e:	4828      	ldr	r0, [pc, #160]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 8000730:	f000 ff26 	bl	8001580 <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00d      	beq.n	8000756 <HAL_GPIO_EXTI_Callback+0x3ee>
    {
    	SSD1306_Clear();
 800073a:	f000 fa88 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f000 f9c9 	bl	8000ad8 <SSD1306_GotoXY>
    	 SSD1306_Puts ("F3", &Font_16x26, 1);
 8000746:	2201      	movs	r2, #1
 8000748:	4922      	ldr	r1, [pc, #136]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x46c>)
 800074a:	4826      	ldr	r0, [pc, #152]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x47c>)
 800074c:	f000 fa5a 	bl	8000c04 <SSD1306_Puts>
    	 SSD1306_UpdateScreen();
 8000750:	f000 f91e 	bl	8000990 <SSD1306_UpdateScreen>
 8000754:	e016      	b.n	8000784 <HAL_GPIO_EXTI_Callback+0x41c>
    }
    else if(GPIO_Pin == GPIO_PIN_3 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3))
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	2b08      	cmp	r3, #8
 800075a:	d113      	bne.n	8000784 <HAL_GPIO_EXTI_Callback+0x41c>
 800075c:	2108      	movs	r1, #8
 800075e:	481c      	ldr	r0, [pc, #112]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 8000760:	f000 ff0e 	bl	8001580 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00c      	beq.n	8000784 <HAL_GPIO_EXTI_Callback+0x41c>
    {
    	SSD1306_Clear();
 800076a:	f000 fa70 	bl	8000c4e <SSD1306_Clear>
    	SSD1306_GotoXY (0,0);
 800076e:	2100      	movs	r1, #0
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f9b1 	bl	8000ad8 <SSD1306_GotoXY>
    	SSD1306_Puts ("F4", &Font_16x26, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	4916      	ldr	r1, [pc, #88]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x46c>)
 800077a:	481b      	ldr	r0, [pc, #108]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x480>)
 800077c:	f000 fa42 	bl	8000c04 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 8000780:	f000 f906 	bl	8000990 <SSD1306_UpdateScreen>
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	2110      	movs	r1, #16
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 800078a:	f000 ff10 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	480f      	ldr	r0, [pc, #60]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 8000794:	f000 ff0b 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	2140      	movs	r1, #64	; 0x40
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 800079e:	f000 ff06 	bl	80015ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 80007a8:	f000 ff01 	bl	80015ae <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PA0 PA1 PA2 PA3 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_GPIO_EXTI_Callback+0x484>)
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x488>)
 80007b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_GPIO_EXTI_Callback+0x484>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80007b8:	490c      	ldr	r1, [pc, #48]	; (80007ec <HAL_GPIO_EXTI_Callback+0x484>)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x468>)
 80007bc:	f000 fd5c 	bl	8001278 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x48c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x490>)
 80007c6:	6013      	str	r3, [r2, #0]
  }
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40010800 	.word	0x40010800
 80007d4:	20000000 	.word	0x20000000
 80007d8:	080029b0 	.word	0x080029b0
 80007dc:	080029b4 	.word	0x080029b4
 80007e0:	080029b8 	.word	0x080029b8
 80007e4:	080029bc 	.word	0x080029bc
 80007e8:	080029c0 	.word	0x080029c0
 80007ec:	20000030 	.word	0x20000030
 80007f0:	10110000 	.word	0x10110000
 80007f4:	20000044 	.word	0x20000044
 80007f8:	20000040 	.word	0x20000040

080007fc <Error_Handler>:

////////////////////////////
////////////////////////////
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800080e:	f000 fa27 	bl	8000c60 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000812:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000816:	2201      	movs	r2, #1
 8000818:	2178      	movs	r1, #120	; 0x78
 800081a:	485b      	ldr	r0, [pc, #364]	; (8000988 <SSD1306_Init+0x180>)
 800081c:	f001 f93a 	bl	8001a94 <HAL_I2C_IsDeviceReady>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000826:	2300      	movs	r3, #0
 8000828:	e0a9      	b.n	800097e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800082a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800082e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000830:	e002      	b.n	8000838 <SSD1306_Init+0x30>
		p--;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3b01      	subs	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1f9      	bne.n	8000832 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800083e:	22ae      	movs	r2, #174	; 0xae
 8000840:	2100      	movs	r1, #0
 8000842:	2078      	movs	r0, #120	; 0x78
 8000844:	f000 fa86 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000848:	2220      	movs	r2, #32
 800084a:	2100      	movs	r1, #0
 800084c:	2078      	movs	r0, #120	; 0x78
 800084e:	f000 fa81 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000852:	2210      	movs	r2, #16
 8000854:	2100      	movs	r1, #0
 8000856:	2078      	movs	r0, #120	; 0x78
 8000858:	f000 fa7c 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800085c:	22b0      	movs	r2, #176	; 0xb0
 800085e:	2100      	movs	r1, #0
 8000860:	2078      	movs	r0, #120	; 0x78
 8000862:	f000 fa77 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000866:	22c8      	movs	r2, #200	; 0xc8
 8000868:	2100      	movs	r1, #0
 800086a:	2078      	movs	r0, #120	; 0x78
 800086c:	f000 fa72 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	2078      	movs	r0, #120	; 0x78
 8000876:	f000 fa6d 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800087a:	2210      	movs	r2, #16
 800087c:	2100      	movs	r1, #0
 800087e:	2078      	movs	r0, #120	; 0x78
 8000880:	f000 fa68 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000884:	2240      	movs	r2, #64	; 0x40
 8000886:	2100      	movs	r1, #0
 8000888:	2078      	movs	r0, #120	; 0x78
 800088a:	f000 fa63 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800088e:	2281      	movs	r2, #129	; 0x81
 8000890:	2100      	movs	r1, #0
 8000892:	2078      	movs	r0, #120	; 0x78
 8000894:	f000 fa5e 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000898:	22ff      	movs	r2, #255	; 0xff
 800089a:	2100      	movs	r1, #0
 800089c:	2078      	movs	r0, #120	; 0x78
 800089e:	f000 fa59 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80008a2:	22a1      	movs	r2, #161	; 0xa1
 80008a4:	2100      	movs	r1, #0
 80008a6:	2078      	movs	r0, #120	; 0x78
 80008a8:	f000 fa54 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80008ac:	22a6      	movs	r2, #166	; 0xa6
 80008ae:	2100      	movs	r1, #0
 80008b0:	2078      	movs	r0, #120	; 0x78
 80008b2:	f000 fa4f 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80008b6:	22a8      	movs	r2, #168	; 0xa8
 80008b8:	2100      	movs	r1, #0
 80008ba:	2078      	movs	r0, #120	; 0x78
 80008bc:	f000 fa4a 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80008c0:	223f      	movs	r2, #63	; 0x3f
 80008c2:	2100      	movs	r1, #0
 80008c4:	2078      	movs	r0, #120	; 0x78
 80008c6:	f000 fa45 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008ca:	22a4      	movs	r2, #164	; 0xa4
 80008cc:	2100      	movs	r1, #0
 80008ce:	2078      	movs	r0, #120	; 0x78
 80008d0:	f000 fa40 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80008d4:	22d3      	movs	r2, #211	; 0xd3
 80008d6:	2100      	movs	r1, #0
 80008d8:	2078      	movs	r0, #120	; 0x78
 80008da:	f000 fa3b 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2078      	movs	r0, #120	; 0x78
 80008e4:	f000 fa36 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80008e8:	22d5      	movs	r2, #213	; 0xd5
 80008ea:	2100      	movs	r1, #0
 80008ec:	2078      	movs	r0, #120	; 0x78
 80008ee:	f000 fa31 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80008f2:	22f0      	movs	r2, #240	; 0xf0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2078      	movs	r0, #120	; 0x78
 80008f8:	f000 fa2c 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80008fc:	22d9      	movs	r2, #217	; 0xd9
 80008fe:	2100      	movs	r1, #0
 8000900:	2078      	movs	r0, #120	; 0x78
 8000902:	f000 fa27 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000906:	2222      	movs	r2, #34	; 0x22
 8000908:	2100      	movs	r1, #0
 800090a:	2078      	movs	r0, #120	; 0x78
 800090c:	f000 fa22 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000910:	22da      	movs	r2, #218	; 0xda
 8000912:	2100      	movs	r1, #0
 8000914:	2078      	movs	r0, #120	; 0x78
 8000916:	f000 fa1d 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800091a:	2212      	movs	r2, #18
 800091c:	2100      	movs	r1, #0
 800091e:	2078      	movs	r0, #120	; 0x78
 8000920:	f000 fa18 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000924:	22db      	movs	r2, #219	; 0xdb
 8000926:	2100      	movs	r1, #0
 8000928:	2078      	movs	r0, #120	; 0x78
 800092a:	f000 fa13 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800092e:	2220      	movs	r2, #32
 8000930:	2100      	movs	r1, #0
 8000932:	2078      	movs	r0, #120	; 0x78
 8000934:	f000 fa0e 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000938:	228d      	movs	r2, #141	; 0x8d
 800093a:	2100      	movs	r1, #0
 800093c:	2078      	movs	r0, #120	; 0x78
 800093e:	f000 fa09 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000942:	2214      	movs	r2, #20
 8000944:	2100      	movs	r1, #0
 8000946:	2078      	movs	r0, #120	; 0x78
 8000948:	f000 fa04 	bl	8000d54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800094c:	22af      	movs	r2, #175	; 0xaf
 800094e:	2100      	movs	r1, #0
 8000950:	2078      	movs	r0, #120	; 0x78
 8000952:	f000 f9ff 	bl	8000d54 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000956:	222e      	movs	r2, #46	; 0x2e
 8000958:	2100      	movs	r1, #0
 800095a:	2078      	movs	r0, #120	; 0x78
 800095c:	f000 f9fa 	bl	8000d54 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000960:	2000      	movs	r0, #0
 8000962:	f000 f843 	bl	80009ec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000966:	f000 f813 	bl	8000990 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <SSD1306_Init+0x184>)
 800096c:	2200      	movs	r2, #0
 800096e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SSD1306_Init+0x184>)
 8000972:	2200      	movs	r2, #0
 8000974:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <SSD1306_Init+0x184>)
 8000978:	2201      	movs	r2, #1
 800097a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800097c:	2301      	movs	r3, #1
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000048 	.word	0x20000048
 800098c:	2000049c 	.word	0x2000049c

08000990 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000996:	2300      	movs	r3, #0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	e01d      	b.n	80009d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	3b50      	subs	r3, #80	; 0x50
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	2078      	movs	r0, #120	; 0x78
 80009a8:	f000 f9d4 	bl	8000d54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2078      	movs	r0, #120	; 0x78
 80009b2:	f000 f9cf 	bl	8000d54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80009b6:	2210      	movs	r2, #16
 80009b8:	2100      	movs	r1, #0
 80009ba:	2078      	movs	r0, #120	; 0x78
 80009bc:	f000 f9ca 	bl	8000d54 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	01db      	lsls	r3, r3, #7
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <SSD1306_UpdateScreen+0x58>)
 80009c6:	441a      	add	r2, r3
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	2078      	movs	r0, #120	; 0x78
 80009ce:	f000 f95b 	bl	8000c88 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	3301      	adds	r3, #1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b07      	cmp	r3, #7
 80009dc:	d9de      	bls.n	800099c <SSD1306_UpdateScreen+0xc>
	}
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000009c 	.word	0x2000009c

080009ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <SSD1306_Fill+0x14>
 80009fc:	2300      	movs	r3, #0
 80009fe:	e000      	b.n	8000a02 <SSD1306_Fill+0x16>
 8000a00:	23ff      	movs	r3, #255	; 0xff
 8000a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a06:	4619      	mov	r1, r3
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <SSD1306_Fill+0x2c>)
 8000a0a:	f001 ffa3 	bl	8002954 <memset>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000009c 	.word	0x2000009c

08000a1c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	460b      	mov	r3, r1
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	70fb      	strb	r3, [r7, #3]
	if (
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	2b7f      	cmp	r3, #127	; 0x7f
 8000a32:	d848      	bhi.n	8000ac6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000a34:	88bb      	ldrh	r3, [r7, #4]
 8000a36:	2b3f      	cmp	r3, #63	; 0x3f
 8000a38:	d845      	bhi.n	8000ac6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <SSD1306_DrawPixel+0xb4>)
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d006      	beq.n	8000a50 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000a42:	78fb      	ldrb	r3, [r7, #3]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d11a      	bne.n	8000a8c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a56:	88fa      	ldrh	r2, [r7, #6]
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	b298      	uxth	r0, r3
 8000a5e:	4603      	mov	r3, r0
 8000a60:	01db      	lsls	r3, r3, #7
 8000a62:	4413      	add	r3, r2
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <SSD1306_DrawPixel+0xb8>)
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	b25a      	sxtb	r2, r3
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	2101      	movs	r1, #1
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b259      	sxtb	r1, r3
 8000a7c:	88fa      	ldrh	r2, [r7, #6]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	01db      	lsls	r3, r3, #7
 8000a82:	4413      	add	r3, r2
 8000a84:	b2c9      	uxtb	r1, r1
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <SSD1306_DrawPixel+0xb8>)
 8000a88:	54d1      	strb	r1, [r2, r3]
 8000a8a:	e01d      	b.n	8000ac8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	b298      	uxth	r0, r3
 8000a94:	4603      	mov	r3, r0
 8000a96:	01db      	lsls	r3, r3, #7
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <SSD1306_DrawPixel+0xb8>)
 8000a9c:	5cd3      	ldrb	r3, [r2, r3]
 8000a9e:	b25a      	sxtb	r2, r3
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	b259      	sxtb	r1, r3
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	4603      	mov	r3, r0
 8000aba:	01db      	lsls	r3, r3, #7
 8000abc:	4413      	add	r3, r2
 8000abe:	b2c9      	uxtb	r1, r1
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <SSD1306_DrawPixel+0xb8>)
 8000ac2:	54d1      	strb	r1, [r2, r3]
 8000ac4:	e000      	b.n	8000ac8 <SSD1306_DrawPixel+0xac>
		return;
 8000ac6:	bf00      	nop
	}
}
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	2000049c 	.word	0x2000049c
 8000ad4:	2000009c 	.word	0x2000009c

08000ad8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	80fb      	strh	r3, [r7, #6]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ae8:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SSD1306_GotoXY+0x28>)
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <SSD1306_GotoXY+0x28>)
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	8053      	strh	r3, [r2, #2]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	2000049c 	.word	0x2000049c

08000b04 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b14:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <SSD1306_Putc+0xfc>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
	if (
 8000b20:	2b7f      	cmp	r3, #127	; 0x7f
 8000b22:	dc07      	bgt.n	8000b34 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <SSD1306_Putc+0xfc>)
 8000b26:	885b      	ldrh	r3, [r3, #2]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b30:	2b3f      	cmp	r3, #63	; 0x3f
 8000b32:	dd01      	ble.n	8000b38 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e05e      	b.n	8000bf6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e04b      	b.n	8000bd6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	3b20      	subs	r3, #32
 8000b46:	6839      	ldr	r1, [r7, #0]
 8000b48:	7849      	ldrb	r1, [r1, #1]
 8000b4a:	fb01 f303 	mul.w	r3, r1, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	440b      	add	r3, r1
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	e030      	b.n	8000bc4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d010      	beq.n	8000b94 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <SSD1306_Putc+0xfc>)
 8000b74:	881a      	ldrh	r2, [r3, #0]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b298      	uxth	r0, r3
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <SSD1306_Putc+0xfc>)
 8000b80:	885a      	ldrh	r2, [r3, #2]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4413      	add	r3, r2
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f7ff ff45 	bl	8000a1c <SSD1306_DrawPixel>
 8000b92:	e014      	b.n	8000bbe <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <SSD1306_Putc+0xfc>)
 8000b96:	881a      	ldrh	r2, [r3, #0]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b298      	uxth	r0, r3
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <SSD1306_Putc+0xfc>)
 8000ba2:	885a      	ldrh	r2, [r3, #2]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	b299      	uxth	r1, r3
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2301      	moveq	r3, #1
 8000bb4:	2300      	movne	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	f7ff ff2f 	bl	8000a1c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d3c8      	bcc.n	8000b62 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	785b      	ldrb	r3, [r3, #1]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d3ad      	bcc.n	8000b3e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <SSD1306_Putc+0xfc>)
 8000be4:	881a      	ldrh	r2, [r3, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <SSD1306_Putc+0xfc>)
 8000bf2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000049c 	.word	0x2000049c

08000c04 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000c12:	e012      	b.n	8000c3a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	79fa      	ldrb	r2, [r7, #7]
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff71 	bl	8000b04 <SSD1306_Putc>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d002      	beq.n	8000c34 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	e008      	b.n	8000c46 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1e8      	bne.n	8000c14 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff feca 	bl	80009ec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000c58:	f7ff fe9a 	bl	8000990 <SSD1306_UpdateScreen>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <ssd1306_I2C_Init+0x24>)
 8000c68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c6a:	e002      	b.n	8000c72 <ssd1306_I2C_Init+0x12>
		p--;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f9      	bne.n	8000c6c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	0003d090 	.word	0x0003d090

08000c88 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b0c7      	sub	sp, #284	; 0x11c
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4608      	mov	r0, r1
 8000c92:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000c96:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000c9a:	600a      	str	r2, [r1, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ca2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ca6:	4622      	mov	r2, r4
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cae:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cce:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000cdc:	e015      	b.n	8000d0a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000cde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ce2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ce6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000cea:	6812      	ldr	r2, [r2, #0]
 8000cec:	441a      	add	r2, r3
 8000cee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	7811      	ldrb	r1, [r2, #0]
 8000cf6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cfa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000cfe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000d00:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d04:	3301      	adds	r3, #1
 8000d06:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d0a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d14:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d18:	8812      	ldrh	r2, [r2, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d8df      	bhi.n	8000cde <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d22:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b299      	uxth	r1, r3
 8000d2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	f107 020c 	add.w	r2, r7, #12
 8000d3c:	200a      	movs	r0, #10
 8000d3e:	9000      	str	r0, [sp, #0]
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d42:	f000 fda9 	bl	8001898 <HAL_I2C_Master_Transmit>
}
 8000d46:	bf00      	nop
 8000d48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	20000048 	.word	0x20000048

08000d54 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	71bb      	strb	r3, [r7, #6]
 8000d62:	4613      	mov	r3, r2
 8000d64:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d6a:	797b      	ldrb	r3, [r7, #5]
 8000d6c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	b299      	uxth	r1, r3
 8000d72:	f107 020c 	add.w	r2, r7, #12
 8000d76:	230a      	movs	r3, #10
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <ssd1306_I2C_Write+0x38>)
 8000d7e:	f000 fd8b 	bl	8001898 <HAL_I2C_Master_Transmit>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000048 	.word	0x20000048

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_MspInit+0x5c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_MspInit+0x5c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x5c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_MspInit+0x5c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_MspInit+0x60>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_MspInit+0x60>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000

08000df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a15      	ldr	r2, [pc, #84]	; (8000e64 <HAL_I2C_MspInit+0x70>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d123      	bne.n	8000e5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <HAL_I2C_MspInit+0x78>)
 8000e40:	f000 fa1a 	bl	8001278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4e:	61d3      	str	r3, [r2, #28]
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_I2C_MspInit+0x74>)
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40005400 	.word	0x40005400
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb6:	f000 f891 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 fb8c 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f000 fb85 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ede:	2004      	movs	r0, #4
 8000ee0:	f000 fb7e 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000eec:	2008      	movs	r0, #8
 8000eee:	f000 fb77 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
	...

08000f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f2a:	f7ff ffe4 	bl	8000ef6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f001 fced 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f32:	f7ff f90b 	bl	800014c <main>
  bx lr
 8000f36:	4770      	bx	lr
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f40:	08003d40 	.word	0x08003d40
  ldr r2, =_sbss
 8000f44:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f48:	200004a8 	.word	0x200004a8

08000f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x28>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x28>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f947 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	200f      	movs	r0, #15
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff ff10 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f95f 	bl	800125e <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f927 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000010 	.word	0x20000010
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x1c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <HAL_IncTick+0x20>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	200004a4 	.word	0x200004a4

08001000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <HAL_GetTick+0x10>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	200004a4 	.word	0x200004a4

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff fff0 	bl	8001000 <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffe0 	bl	8001000 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000010 	.word	0x20000010

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4906      	ldr	r1, [pc, #24]	; (80010f4 <__NVIC_EnableIRQ+0x34>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff90 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff2d 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff42 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff90 	bl	800114c <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5f 	bl	80010f8 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff35 	bl	80010c0 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b08b      	sub	sp, #44	; 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e169      	b.n	8001560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800128c:	2201      	movs	r2, #1
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8158 	bne.w	800155a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a9a      	ldr	r2, [pc, #616]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d05e      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012b4:	4a98      	ldr	r2, [pc, #608]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d875      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ba:	4a98      	ldr	r2, [pc, #608]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d058      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012c0:	4a96      	ldr	r2, [pc, #600]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d86f      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012c6:	4a96      	ldr	r2, [pc, #600]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d052      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012cc:	4a94      	ldr	r2, [pc, #592]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d869      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012d2:	4a94      	ldr	r2, [pc, #592]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d04c      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012d8:	4a92      	ldr	r2, [pc, #584]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d863      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012de:	4a92      	ldr	r2, [pc, #584]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d046      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012e4:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d85d      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d82a      	bhi.n	8001344 <HAL_GPIO_Init+0xcc>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d859      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <HAL_GPIO_Init+0x80>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001373 	.word	0x08001373
 80012fc:	0800134d 	.word	0x0800134d
 8001300:	0800135f 	.word	0x0800135f
 8001304:	080013a1 	.word	0x080013a1
 8001308:	080013a7 	.word	0x080013a7
 800130c:	080013a7 	.word	0x080013a7
 8001310:	080013a7 	.word	0x080013a7
 8001314:	080013a7 	.word	0x080013a7
 8001318:	080013a7 	.word	0x080013a7
 800131c:	080013a7 	.word	0x080013a7
 8001320:	080013a7 	.word	0x080013a7
 8001324:	080013a7 	.word	0x080013a7
 8001328:	080013a7 	.word	0x080013a7
 800132c:	080013a7 	.word	0x080013a7
 8001330:	080013a7 	.word	0x080013a7
 8001334:	080013a7 	.word	0x080013a7
 8001338:	080013a7 	.word	0x080013a7
 800133c:	08001355 	.word	0x08001355
 8001340:	08001369 	.word	0x08001369
 8001344:	4a79      	ldr	r2, [pc, #484]	; (800152c <HAL_GPIO_Init+0x2b4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134a:	e02c      	b.n	80013a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e029      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	3304      	adds	r3, #4
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e024      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	3308      	adds	r3, #8
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e01f      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	330c      	adds	r3, #12
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e01a      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137a:	2304      	movs	r3, #4
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e013      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	611a      	str	r2, [r3, #16]
          break;
 8001392:	e009      	b.n	80013a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001394:	2308      	movs	r3, #8
 8001396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	615a      	str	r2, [r3, #20]
          break;
 800139e:	e003      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          break;
 80013a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d801      	bhi.n	80013b2 <HAL_GPIO_Init+0x13a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_Init+0x13e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d802      	bhi.n	80013c4 <HAL_GPIO_Init+0x14c>
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	e002      	b.n	80013ca <HAL_GPIO_Init+0x152>
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3b08      	subs	r3, #8
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	210f      	movs	r1, #15
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	6a39      	ldr	r1, [r7, #32]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80b1 	beq.w	800155a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a40      	ldr	r2, [pc, #256]	; (8001538 <HAL_GPIO_Init+0x2c0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d013      	beq.n	8001464 <HAL_GPIO_Init+0x1ec>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_GPIO_Init+0x2c4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d00d      	beq.n	8001460 <HAL_GPIO_Init+0x1e8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <HAL_GPIO_Init+0x2c8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d007      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_GPIO_Init+0x1e0>
 8001454:	2303      	movs	r3, #3
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001458:	2304      	movs	r3, #4
 800145a:	e004      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 800145c:	2302      	movs	r3, #2
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001464:	2300      	movs	r3, #0
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001476:	492f      	ldr	r1, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	492c      	ldr	r1, [pc, #176]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4928      	ldr	r1, [pc, #160]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	491e      	ldr	r1, [pc, #120]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	4918      	ldr	r1, [pc, #96]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4914      	ldr	r1, [pc, #80]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d021      	beq.n	800154c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	490e      	ldr	r1, [pc, #56]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
 8001514:	e021      	b.n	800155a <HAL_GPIO_Init+0x2e2>
 8001516:	bf00      	nop
 8001518:	10320000 	.word	0x10320000
 800151c:	10310000 	.word	0x10310000
 8001520:	10220000 	.word	0x10220000
 8001524:	10210000 	.word	0x10210000
 8001528:	10120000 	.word	0x10120000
 800152c:	10110000 	.word	0x10110000
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	40010800 	.word	0x40010800
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40011000 	.word	0x40011000
 8001544:	40011400 	.word	0x40011400
 8001548:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_GPIO_Init+0x304>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	43db      	mvns	r3, r3
 8001554:	4909      	ldr	r1, [pc, #36]	; (800157c <HAL_GPIO_Init+0x304>)
 8001556:	4013      	ands	r3, r2
 8001558:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	3301      	adds	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	f47f ae8e 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	372c      	adds	r7, #44	; 0x2c
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015be:	787b      	ldrb	r3, [r7, #1]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	041a      	lsls	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	611a      	str	r2, [r3, #16]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe feb2 	bl	8000368 <HAL_GPIO_EXTI_Callback>
  }
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40010400 	.word	0x40010400

08001610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e12b      	b.n	800187a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fbdc 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001674:	f001 f918 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a81      	ldr	r2, [pc, #516]	; (8001884 <HAL_I2C_Init+0x274>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d807      	bhi.n	8001694 <HAL_I2C_Init+0x84>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4a80      	ldr	r2, [pc, #512]	; (8001888 <HAL_I2C_Init+0x278>)
 8001688:	4293      	cmp	r3, r2
 800168a:	bf94      	ite	ls
 800168c:	2301      	movls	r3, #1
 800168e:	2300      	movhi	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	e006      	b.n	80016a2 <HAL_I2C_Init+0x92>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a7d      	ldr	r2, [pc, #500]	; (800188c <HAL_I2C_Init+0x27c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	bf94      	ite	ls
 800169c:	2301      	movls	r3, #1
 800169e:	2300      	movhi	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0e7      	b.n	800187a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4a78      	ldr	r2, [pc, #480]	; (8001890 <HAL_I2C_Init+0x280>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9b      	lsrs	r3, r3, #18
 80016b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a6a      	ldr	r2, [pc, #424]	; (8001884 <HAL_I2C_Init+0x274>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d802      	bhi.n	80016e4 <HAL_I2C_Init+0xd4>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3301      	adds	r3, #1
 80016e2:	e009      	b.n	80016f8 <HAL_I2C_Init+0xe8>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	4a69      	ldr	r2, [pc, #420]	; (8001894 <HAL_I2C_Init+0x284>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	3301      	adds	r3, #1
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800170a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	495c      	ldr	r1, [pc, #368]	; (8001884 <HAL_I2C_Init+0x274>)
 8001714:	428b      	cmp	r3, r1
 8001716:	d819      	bhi.n	800174c <HAL_I2C_Init+0x13c>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e59      	subs	r1, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fbb1 f3f3 	udiv	r3, r1, r3
 8001726:	1c59      	adds	r1, r3, #1
 8001728:	f640 73fc 	movw	r3, #4092	; 0xffc
 800172c:	400b      	ands	r3, r1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00a      	beq.n	8001748 <HAL_I2C_Init+0x138>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1e59      	subs	r1, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001740:	3301      	adds	r3, #1
 8001742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001746:	e051      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 8001748:	2304      	movs	r3, #4
 800174a:	e04f      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d111      	bne.n	8001778 <HAL_I2C_Init+0x168>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e58      	subs	r0, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	440b      	add	r3, r1
 8001762:	fbb0 f3f3 	udiv	r3, r0, r3
 8001766:	3301      	adds	r3, #1
 8001768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e012      	b.n	800179e <HAL_I2C_Init+0x18e>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1e58      	subs	r0, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	0099      	lsls	r1, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Init+0x196>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e022      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10e      	bne.n	80017cc <HAL_I2C_Init+0x1bc>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e58      	subs	r0, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	440b      	add	r3, r1
 80017bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ca:	e00f      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	0099      	lsls	r1, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	6809      	ldr	r1, [r1, #0]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800181a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6911      	ldr	r1, [r2, #16]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68d2      	ldr	r2, [r2, #12]
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	430b      	orrs	r3, r1
 800182e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	000186a0 	.word	0x000186a0
 8001888:	001e847f 	.word	0x001e847f
 800188c:	003d08ff 	.word	0x003d08ff
 8001890:	431bde83 	.word	0x431bde83
 8001894:	10624dd3 	.word	0x10624dd3

08001898 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af02      	add	r7, sp, #8
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	461a      	mov	r2, r3
 80018a4:	460b      	mov	r3, r1
 80018a6:	817b      	strh	r3, [r7, #10]
 80018a8:	4613      	mov	r3, r2
 80018aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff fba8 	bl	8001000 <HAL_GetTick>
 80018b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	f040 80e0 	bne.w	8001a80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2319      	movs	r3, #25
 80018c6:	2201      	movs	r2, #1
 80018c8:	4970      	ldr	r1, [pc, #448]	; (8001a8c <HAL_I2C_Master_Transmit+0x1f4>)
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fa92 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018d6:	2302      	movs	r3, #2
 80018d8:	e0d3      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_I2C_Master_Transmit+0x50>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e0cc      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1ea>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d007      	beq.n	800190e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0201 	orr.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2221      	movs	r2, #33	; 0x21
 8001922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2210      	movs	r2, #16
 800192a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	893a      	ldrh	r2, [r7, #8]
 800193e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001944:	b29a      	uxth	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a50      	ldr	r2, [pc, #320]	; (8001a90 <HAL_I2C_Master_Transmit+0x1f8>)
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001950:	8979      	ldrh	r1, [r7, #10]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	6a3a      	ldr	r2, [r7, #32]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f9ca 	bl	8001cf0 <I2C_MasterRequestWrite>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e08d      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800197c:	e066      	b.n	8001a4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	6a39      	ldr	r1, [r7, #32]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 fb0c 	bl	8001fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00d      	beq.n	80019aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	2b04      	cmp	r3, #4
 8001994:	d107      	bne.n	80019a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d11b      	bne.n	8001a20 <HAL_I2C_Master_Transmit+0x188>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d017      	beq.n	8001a20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	6a39      	ldr	r1, [r7, #32]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fafc 	bl	8002022 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00d      	beq.n	8001a4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d107      	bne.n	8001a48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e01a      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d194      	bne.n	800197e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e000      	b.n	8001a82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
  }
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	00100002 	.word	0x00100002
 8001a90:	ffff0000 	.word	0xffff0000

08001a94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff faac 	bl	8001000 <HAL_GetTick>
 8001aa8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	f040 8111 	bne.w	8001cde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2319      	movs	r3, #25
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4988      	ldr	r1, [pc, #544]	; (8001ce8 <HAL_I2C_IsDeviceReady+0x254>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f994 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e104      	b.n	8001ce0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_I2C_IsDeviceReady+0x50>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e0fd      	b.n	8001ce0 <HAL_I2C_IsDeviceReady+0x24c>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d007      	beq.n	8001b0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2224      	movs	r2, #36	; 0x24
 8001b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4a70      	ldr	r2, [pc, #448]	; (8001cec <HAL_I2C_IsDeviceReady+0x258>)
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f952 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b64:	d103      	bne.n	8001b6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e0b6      	b.n	8001ce0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b72:	897b      	ldrh	r3, [r7, #10]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b82:	f7ff fa3d 	bl	8001000 <HAL_GetTick>
 8001b86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	bf0c      	ite	eq
 8001b96:	2301      	moveq	r3, #1
 8001b98:	2300      	movne	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bb6:	e025      	b.n	8001c04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bb8:	f7ff fa22 	bl	8001000 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d302      	bcc.n	8001bce <HAL_I2C_IsDeviceReady+0x13a>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	22a0      	movs	r2, #160	; 0xa0
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2ba0      	cmp	r3, #160	; 0xa0
 8001c0e:	d005      	beq.n	8001c1c <HAL_I2C_IsDeviceReady+0x188>
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <HAL_I2C_IsDeviceReady+0x188>
 8001c16:	7dbb      	ldrb	r3, [r7, #22]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0cd      	beq.n	8001bb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d129      	bne.n	8001c86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4921      	ldr	r1, [pc, #132]	; (8001ce8 <HAL_I2C_IsDeviceReady+0x254>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f8c6 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e036      	b.n	8001ce0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e02c      	b.n	8001ce0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2319      	movs	r3, #25
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	490f      	ldr	r1, [pc, #60]	; (8001ce8 <HAL_I2C_IsDeviceReady+0x254>)
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f8a2 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e012      	b.n	8001ce0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f4ff af32 	bcc.w	8001b2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
  }
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	00100002 	.word	0x00100002
 8001cec:	ffff0000 	.word	0xffff0000

08001cf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d006      	beq.n	8001d1a <I2C_MasterRequestWrite+0x2a>
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d003      	beq.n	8001d1a <I2C_MasterRequestWrite+0x2a>
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d18:	d108      	bne.n	8001d2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e00b      	b.n	8001d44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	2b12      	cmp	r3, #18
 8001d32:	d107      	bne.n	8001d44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f84f 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00d      	beq.n	8001d78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6a:	d103      	bne.n	8001d74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e035      	b.n	8001de4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d80:	d108      	bne.n	8001d94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d82:	897b      	ldrh	r3, [r7, #10]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	e01b      	b.n	8001dcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	11db      	asrs	r3, r3, #7
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f003 0306 	and.w	r3, r3, #6
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f063 030f 	orn	r3, r3, #15
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	490e      	ldr	r1, [pc, #56]	; (8001dec <I2C_MasterRequestWrite+0xfc>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f875 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e010      	b.n	8001de4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4907      	ldr	r1, [pc, #28]	; (8001df0 <I2C_MasterRequestWrite+0x100>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f865 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	00010008 	.word	0x00010008
 8001df0:	00010002 	.word	0x00010002

08001df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e04:	e025      	b.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d021      	beq.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	f7ff f8f7 	bl	8001000 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d116      	bne.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f043 0220 	orr.w	r2, r3, #32
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e023      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10d      	bne.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4013      	ands	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	e00c      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d0b6      	beq.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eb0:	e051      	b.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec0:	d123      	bne.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e046      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d021      	beq.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f12:	f7ff f875 	bl	8001000 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d302      	bcc.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d116      	bne.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f043 0220 	orr.w	r2, r3, #32
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e020      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d10c      	bne.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e00b      	b.n	8001f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d18d      	bne.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fac:	e02d      	b.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f878 	bl	80020a4 <I2C_IsAcknowledgeFailed>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e02d      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d021      	beq.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7ff f81b 	bl	8001000 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d116      	bne.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e007      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d1ca      	bne.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800202e:	e02d      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f837 	bl	80020a4 <I2C_IsAcknowledgeFailed>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e02d      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d021      	beq.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7fe ffda 	bl	8001000 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d1ca      	bne.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ba:	d11b      	bne.n	80020f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e272      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8087 	beq.w	800222e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002120:	4b92      	ldr	r3, [pc, #584]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b04      	cmp	r3, #4
 800212a:	d00c      	beq.n	8002146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800212c:	4b8f      	ldr	r3, [pc, #572]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d112      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
 8002138:	4b8c      	ldr	r3, [pc, #560]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d10b      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002146:	4b89      	ldr	r3, [pc, #548]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d06c      	beq.n	800222c <HAL_RCC_OscConfig+0x12c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d168      	bne.n	800222c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e24c      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x76>
 8002168:	4b80      	ldr	r3, [pc, #512]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a7f      	ldr	r2, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e02e      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b7b      	ldr	r3, [pc, #492]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7a      	ldr	r2, [pc, #488]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b78      	ldr	r3, [pc, #480]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a77      	ldr	r2, [pc, #476]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0xbc>
 80021a2:	4b72      	ldr	r3, [pc, #456]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a71      	ldr	r2, [pc, #452]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b6f      	ldr	r3, [pc, #444]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 80021bc:	4b6b      	ldr	r3, [pc, #428]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6a      	ldr	r2, [pc, #424]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a67      	ldr	r2, [pc, #412]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe ff10 	bl	8001000 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe ff0c 	bl	8001000 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e200      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xe4>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe fefc 	bl	8001000 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7fe fef8 	bl	8001000 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1ec      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x10c>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d063      	beq.n	8002302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223a:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d11c      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
 8002252:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1c0      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4939      	ldr	r1, [pc, #228]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	e03a      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7fe feb1 	bl	8001000 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7fe fead 	bl	8001000 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1a1      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4927      	ldr	r1, [pc, #156]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_RCC_OscConfig+0x270>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe fe90 	bl	8001000 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7fe fe8c 	bl	8001000 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e180      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03a      	beq.n	8002384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_RCC_OscConfig+0x274>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7fe fe70 	bl	8001000 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7fe fe6c 	bl	8001000 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e160      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCC_OscConfig+0x26c>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f000 fac4 	bl	80028d0 <RCC_Delay>
 8002348:	e01c      	b.n	8002384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCC_OscConfig+0x274>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7fe fe56 	bl	8001000 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	e00f      	b.n	8002378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7fe fe52 	bl	8001000 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d908      	bls.n	8002378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e146      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	42420000 	.word	0x42420000
 8002374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	4b92      	ldr	r3, [pc, #584]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e9      	bne.n	8002358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80a6 	beq.w	80024de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a87      	ldr	r2, [pc, #540]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]
 80023ae:	4b85      	ldr	r3, [pc, #532]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b82      	ldr	r3, [pc, #520]	; (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b7f      	ldr	r3, [pc, #508]	; (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7e      	ldr	r2, [pc, #504]	; (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7fe fe13 	bl	8001000 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7fe fe0f 	bl	8001000 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	; 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e103      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x312>
 8002404:	4b6f      	ldr	r3, [pc, #444]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a6e      	ldr	r2, [pc, #440]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e02d      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x334>
 800241a:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a69      	ldr	r2, [pc, #420]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a66      	ldr	r2, [pc, #408]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	e01c      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x356>
 800243c:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a60      	ldr	r2, [pc, #384]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a5d      	ldr	r2, [pc, #372]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e00b      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002456:	4b5b      	ldr	r3, [pc, #364]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a5a      	ldr	r2, [pc, #360]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe fdc3 	bl	8001000 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fdbf 	bl	8001000 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0b1      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <HAL_RCC_OscConfig+0x37e>
 80024a0:	e014      	b.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fdad 	bl	8001000 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe fda9 	bl	8001000 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e09b      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ee      	bne.n	80024aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d105      	bne.n	80024de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8087 	beq.w	80025f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d061      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d146      	bne.n	800258a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b33      	ldr	r3, [pc, #204]	; (80025cc <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fd7d 	bl	8001000 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe fd79 	bl	8001000 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e06d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002532:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4921      	ldr	r1, [pc, #132]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a19      	ldr	r1, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	430b      	orrs	r3, r1
 8002556:	491b      	ldr	r1, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x4cc>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe fd4d 	bl	8001000 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7fe fd49 	bl	8001000 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e03d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x46a>
 8002588:	e035      	b.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_OscConfig+0x4cc>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fd36 	bl	8001000 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fd32 	bl	8001000 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e026      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x498>
 80025b6:	e01e      	b.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e019      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_OscConfig+0x500>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0d0      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b6a      	ldr	r3, [pc, #424]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d910      	bls.n	8002648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0207 	bic.w	r2, r3, #7
 800262e:	4965      	ldr	r1, [pc, #404]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0b8      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002660:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800266a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	494d      	ldr	r1, [pc, #308]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d040      	beq.n	8002724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d115      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e073      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06b      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4936      	ldr	r1, [pc, #216]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fc84 	bl	8001000 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fc80 	bl	8001000 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e053      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d210      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4922      	ldr	r1, [pc, #136]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e032      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4916      	ldr	r1, [pc, #88]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002792:	f000 f821 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002796:	4602      	mov	r2, r0
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	490a      	ldr	r1, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	5ccb      	ldrb	r3, [r1, r3]
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1cc>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1d0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fbe2 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08003d20 	.word	0x08003d20
 80027d0:	20000008 	.word	0x20000008
 80027d4:	2000000c 	.word	0x2000000c

080027d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	b490      	push	{r4, r7}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_GetSysClockFreq+0xac>)
 80027e0:	1d3c      	adds	r4, r7, #4
 80027e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027e8:	f240 2301 	movw	r3, #513	; 0x201
 80027ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002802:	4b21      	ldr	r3, [pc, #132]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b04      	cmp	r3, #4
 8002810:	d002      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x40>
 8002812:	2b08      	cmp	r3, #8
 8002814:	d003      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x46>
 8002816:	e02b      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_RCC_GetSysClockFreq+0xb4>)
 800281a:	623b      	str	r3, [r7, #32]
      break;
 800281c:	e02b      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3328      	adds	r3, #40	; 0x28
 8002828:	443b      	add	r3, r7
 800282a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800282e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb0>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	0c5b      	lsrs	r3, r3, #17
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	3328      	adds	r3, #40	; 0x28
 8002846:	443b      	add	r3, r7
 8002848:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800284c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002852:	fb03 f202 	mul.w	r2, r3, r2
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	e004      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	623b      	str	r3, [r7, #32]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	6a3b      	ldr	r3, [r7, #32]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc90      	pop	{r4, r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	080029c4 	.word	0x080029c4
 8002888:	40021000 	.word	0x40021000
 800288c:	007a1200 	.word	0x007a1200
 8002890:	003d0900 	.word	0x003d0900

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	20000008 	.word	0x20000008

080028a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028ac:	f7ff fff2 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08003d30 	.word	0x08003d30

080028d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <RCC_Delay+0x34>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <RCC_Delay+0x38>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0a5b      	lsrs	r3, r3, #9
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028ec:	bf00      	nop
  }
  while (Delay --);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1e5a      	subs	r2, r3, #1
 80028f2:	60fa      	str	r2, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f9      	bne.n	80028ec <RCC_Delay+0x1c>
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000008 	.word	0x20000008
 8002908:	10624dd3 	.word	0x10624dd3

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2600      	movs	r6, #0
 8002910:	4d0c      	ldr	r5, [pc, #48]	; (8002944 <__libc_init_array+0x38>)
 8002912:	4c0d      	ldr	r4, [pc, #52]	; (8002948 <__libc_init_array+0x3c>)
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	f000 f822 	bl	8002964 <_init>
 8002920:	2600      	movs	r6, #0
 8002922:	4d0a      	ldr	r5, [pc, #40]	; (800294c <__libc_init_array+0x40>)
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <__libc_init_array+0x44>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	f855 3b04 	ldr.w	r3, [r5], #4
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	f855 3b04 	ldr.w	r3, [r5], #4
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	08003d38 	.word	0x08003d38
 8002948:	08003d38 	.word	0x08003d38
 800294c:	08003d38 	.word	0x08003d38
 8002950:	08003d3c 	.word	0x08003d3c

08002954 <memset>:
 8002954:	4603      	mov	r3, r0
 8002956:	4402      	add	r2, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	f803 1b01 	strb.w	r1, [r3], #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr
