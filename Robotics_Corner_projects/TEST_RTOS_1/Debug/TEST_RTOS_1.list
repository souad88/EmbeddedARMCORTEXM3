
TEST_RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013b8  080013b8  000113b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013c8  080013c8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080013c8  080013c8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013c8  080013c8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013c8  080013c8  000113c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013cc  080013cc  000113cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080013d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002954  20000008  080013d8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000295c  080013d8  0002295c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000324a  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b61  00000000  00000000  0002327b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00023de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000350  00000000  00000000  000241a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147f9  00000000  00000000  000244f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000041f7  00000000  00000000  00038cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e28  00000000  00000000  0003cee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1d10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc0  00000000  00000000  000c1d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000008 	.word	0x20000008
 800012c:	00000000 	.word	0x00000000
 8000130:	080013a0 	.word	0x080013a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000000c 	.word	0x2000000c
 800014c:	080013a0 	.word	0x080013a0

08000150 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 800015c:	f000 fd58 	bl	8000c10 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000160:	4b4c      	ldr	r3, [pc, #304]	; (8000294 <pvPortMalloc+0x144>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d101      	bne.n	800016c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000168:	f000 f8e0 	bl	800032c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800016c:	4b4a      	ldr	r3, [pc, #296]	; (8000298 <pvPortMalloc+0x148>)
 800016e:	681a      	ldr	r2, [r3, #0]
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4013      	ands	r3, r2
 8000174:	2b00      	cmp	r3, #0
 8000176:	f040 8086 	bne.w	8000286 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d01e      	beq.n	80001be <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8000180:	2208      	movs	r2, #8
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	429a      	cmp	r2, r3
 800018a:	d218      	bcs.n	80001be <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 800018c:	2208      	movs	r2, #8
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4413      	add	r3, r2
 8000192:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f003 0307 	and.w	r3, r3, #7
 800019a:	2b00      	cmp	r3, #0
 800019c:	d011      	beq.n	80001c2 <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f023 0307 	bic.w	r3, r3, #7
 80001a4:	3308      	adds	r3, #8
 80001a6:	687a      	ldr	r2, [r7, #4]
 80001a8:	429a      	cmp	r2, r3
 80001aa:	d205      	bcs.n	80001b8 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	f023 0307 	bic.w	r3, r3, #7
 80001b2:	3308      	adds	r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80001b6:	e004      	b.n	80001c2 <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80001bc:	e001      	b.n	80001c2 <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d05e      	beq.n	8000286 <pvPortMalloc+0x136>
 80001c8:	4b34      	ldr	r3, [pc, #208]	; (800029c <pvPortMalloc+0x14c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d859      	bhi.n	8000286 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80001d2:	4b33      	ldr	r3, [pc, #204]	; (80002a0 <pvPortMalloc+0x150>)
 80001d4:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 80001d6:	4b32      	ldr	r3, [pc, #200]	; (80002a0 <pvPortMalloc+0x150>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001dc:	e004      	b.n	80001e8 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80001de:	697b      	ldr	r3, [r7, #20]
 80001e0:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001e8:	697b      	ldr	r3, [r7, #20]
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d903      	bls.n	80001fa <pvPortMalloc+0xaa>
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d1f1      	bne.n	80001de <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <pvPortMalloc+0x144>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	697a      	ldr	r2, [r7, #20]
 8000200:	429a      	cmp	r2, r3
 8000202:	d040      	beq.n	8000286 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000204:	693b      	ldr	r3, [r7, #16]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2208      	movs	r2, #8
 800020a:	4413      	add	r3, r2
 800020c:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	685a      	ldr	r2, [r3, #4]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	1ad2      	subs	r2, r2, r3
 800021e:	2308      	movs	r3, #8
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	429a      	cmp	r2, r3
 8000224:	d90f      	bls.n	8000246 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000226:	697a      	ldr	r2, [r7, #20]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1ad2      	subs	r2, r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000240:	68b8      	ldr	r0, [r7, #8]
 8000242:	f000 f8d5 	bl	80003f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <pvPortMalloc+0x14c>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	1ad3      	subs	r3, r2, r3
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <pvPortMalloc+0x14c>)
 8000252:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <pvPortMalloc+0x14c>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <pvPortMalloc+0x154>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	429a      	cmp	r2, r3
 800025e:	d203      	bcs.n	8000268 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <pvPortMalloc+0x14c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a0f      	ldr	r2, [pc, #60]	; (80002a4 <pvPortMalloc+0x154>)
 8000266:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	685a      	ldr	r2, [r3, #4]
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <pvPortMalloc+0x148>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	431a      	orrs	r2, r3
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <pvPortMalloc+0x158>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <pvPortMalloc+0x158>)
 8000284:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000286:	f000 fcd1 	bl	8000c2c <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 800028a:	68fb      	ldr	r3, [r7, #12]
}
 800028c:	4618      	mov	r0, r3
 800028e:	3718      	adds	r7, #24
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000282c 	.word	0x2000282c
 8000298:	20002840 	.word	0x20002840
 800029c:	20002830 	.word	0x20002830
 80002a0:	20002824 	.word	0x20002824
 80002a4:	20002834 	.word	0x20002834
 80002a8:	20002838 	.word	0x20002838

080002ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d02c      	beq.n	8000318 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80002be:	2308      	movs	r3, #8
 80002c0:	425b      	negs	r3, r3
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4413      	add	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	685a      	ldr	r2, [r3, #4]
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <vPortFree+0x74>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4013      	ands	r3, r2
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d01e      	beq.n	8000318 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d11a      	bne.n	8000318 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	685a      	ldr	r2, [r3, #4]
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <vPortFree+0x74>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	43db      	mvns	r3, r3
 80002ec:	401a      	ands	r2, r3
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80002f2:	f000 fc8d 	bl	8000c10 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	685a      	ldr	r2, [r3, #4]
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <vPortFree+0x78>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4413      	add	r3, r2
 8000300:	4a08      	ldr	r2, [pc, #32]	; (8000324 <vPortFree+0x78>)
 8000302:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000304:	68b8      	ldr	r0, [r7, #8]
 8000306:	f000 f873 	bl	80003f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <vPortFree+0x7c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	3301      	adds	r3, #1
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <vPortFree+0x7c>)
 8000312:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000314:	f000 fc8a 	bl	8000c2c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20002840 	.word	0x20002840
 8000324:	20002830 	.word	0x20002830
 8000328:	2000283c 	.word	0x2000283c

0800032c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000332:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000336:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8000338:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <prvHeapInit+0xac>)
 800033a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f003 0307 	and.w	r3, r3, #7
 8000342:	2b00      	cmp	r3, #0
 8000344:	d00c      	beq.n	8000360 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3307      	adds	r3, #7
 800034a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f023 0307 	bic.w	r3, r3, #7
 8000352:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000354:	68ba      	ldr	r2, [r7, #8]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	4a1f      	ldr	r2, [pc, #124]	; (80003d8 <prvHeapInit+0xac>)
 800035c:	4413      	add	r3, r2
 800035e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000364:	4a1d      	ldr	r2, [pc, #116]	; (80003dc <prvHeapInit+0xb0>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <prvHeapInit+0xb0>)
 800036c:	2200      	movs	r2, #0
 800036e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	4413      	add	r3, r2
 8000376:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000378:	2208      	movs	r2, #8
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	1a9b      	subs	r3, r3, r2
 800037e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f023 0307 	bic.w	r3, r3, #7
 8000386:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4a15      	ldr	r2, [pc, #84]	; (80003e0 <prvHeapInit+0xb4>)
 800038c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <prvHeapInit+0xb4>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <prvHeapInit+0xb4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	68fa      	ldr	r2, [r7, #12]
 80003a6:	1ad2      	subs	r2, r2, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <prvHeapInit+0xb4>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <prvHeapInit+0xb8>)
 80003ba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <prvHeapInit+0xbc>)
 80003c2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <prvHeapInit+0xc0>)
 80003c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	bf00      	nop
 80003ce:	3714      	adds	r7, #20
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000024 	.word	0x20000024
 80003dc:	20002824 	.word	0x20002824
 80003e0:	2000282c 	.word	0x2000282c
 80003e4:	20002834 	.word	0x20002834
 80003e8:	20002830 	.word	0x20002830
 80003ec:	20002840 	.word	0x20002840

080003f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <prvInsertBlockIntoFreeList+0xa8>)
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	e002      	b.n	8000404 <prvInsertBlockIntoFreeList+0x14>
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	429a      	cmp	r2, r3
 800040c:	d8f7      	bhi.n	80003fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	68ba      	ldr	r2, [r7, #8]
 8000418:	4413      	add	r3, r2
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	d108      	bne.n	8000432 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	685a      	ldr	r2, [r3, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	441a      	add	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	441a      	add	r2, r3
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	429a      	cmp	r2, r3
 8000444:	d118      	bne.n	8000478 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	4b14      	ldr	r3, [pc, #80]	; (800049c <prvInsertBlockIntoFreeList+0xac>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	429a      	cmp	r2, r3
 8000450:	d00d      	beq.n	800046e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	685a      	ldr	r2, [r3, #4]
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	441a      	add	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	e008      	b.n	8000480 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <prvInsertBlockIntoFreeList+0xac>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	e003      	b.n	8000480 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	429a      	cmp	r2, r3
 8000486:	d002      	beq.n	800048e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20002824 	.word	0x20002824
 800049c:	2000282c 	.word	0x2000282c

080004a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f103 0208 	add.w	r2, r3, #8
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f04f 32ff 	mov.w	r2, #4294967295
 80004b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f103 0208 	add.w	r2, r3, #8
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f103 0208 	add.w	r2, r3, #8
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80004f6:	b480      	push	{r7}
 80004f8:	b085      	sub	sp, #20
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800050c:	d103      	bne.n	8000516 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e00c      	b.n	8000530 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3308      	adds	r3, #8
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	e002      	b.n	8000524 <vListInsert+0x2e>
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	429a      	cmp	r2, r3
 800052e:	d2f6      	bcs.n	800051e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	685a      	ldr	r2, [r3, #4]
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	6892      	ldr	r2, [r2, #8]
 800057c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	6852      	ldr	r2, [r2, #4]
 8000586:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	d103      	bne.n	800059a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <VTask1>:
#include "FreeRTOS.h"
#include "task.h"
void SystemClock_Config(void);

void VTask1(void *pvParameters)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	 RCC->APB2ENR=(1<<2);
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <VTask1+0x28>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	619a      	str	r2, [r3, #24]
	 GPIOA->CRL=(3<<4);
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <VTask1+0x2c>)
 80005c8:	2230      	movs	r2, #48	; 0x30
 80005ca:	601a      	str	r2, [r3, #0]
	 for(;;)
	 {
		 GPIOA->ODR ^=(1<<1);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <VTask1+0x2c>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <VTask1+0x2c>)
 80005d2:	f083 0302 	eor.w	r3, r3, #2
 80005d6:	60d3      	str	r3, [r2, #12]
		 vTaskDelay(200/portTICK_PERIOD_MS);
 80005d8:	20c8      	movs	r0, #200	; 0xc8
 80005da:	f000 fab9 	bl	8000b50 <vTaskDelay>
		 GPIOA->ODR ^=(1<<1);
 80005de:	e7f5      	b.n	80005cc <VTask1+0x14>
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <main>:
	 }
}
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af02      	add	r7, sp, #8


  xTaskCreate( VTask1 ,"Task 1", 300 , NULL , 1 , NULL);
 80005ee:	2300      	movs	r3, #0
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005fc:	4903      	ldr	r1, [pc, #12]	; (800060c <main+0x24>)
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <main+0x28>)
 8000600:	f000 f949 	bl	8000896 <xTaskCreate>
  vTaskStartScheduler();
 8000604:	f000 fac8 	bl	8000b98 <vTaskStartScheduler>
    while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x20>
 800060a:	bf00      	nop
 800060c:	080013b8 	.word	0x080013b8
 8000610:	080005b9 	.word	0x080005b9

08000614 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3b04      	subs	r3, #4
 8000624:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800062c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3b04      	subs	r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	f023 0201 	bic.w	r2, r3, #1
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3b04      	subs	r3, #4
 8000642:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <pxPortInitialiseStack+0x54>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3b14      	subs	r3, #20
 800064e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	3b20      	subs	r3, #32
 800065a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800065c:	68fb      	ldr	r3, [r7, #12]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	0800066d 	.word	0x0800066d

0800066c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000676:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800067a:	f383 8811 	msr	BASEPRI, r3
 800067e:	f3bf 8f6f 	isb	sy
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000688:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800068a:	bf00      	nop
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0fc      	beq.n	800068c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
	...

080006a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <pxCurrentTCBConst2>)
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	6808      	ldr	r0, [r1, #0]
 80006a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80006aa:	f380 8809 	msr	PSP, r0
 80006ae:	f3bf 8f6f 	isb	sy
 80006b2:	f04f 0000 	mov.w	r0, #0
 80006b6:	f380 8811 	msr	BASEPRI, r0
 80006ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80006be:	4770      	bx	lr

080006c0 <pxCurrentTCBConst2>:
 80006c0:	20002844 	.word	0x20002844
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop

080006c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80006c8:	4806      	ldr	r0, [pc, #24]	; (80006e4 <prvPortStartFirstTask+0x1c>)
 80006ca:	6800      	ldr	r0, [r0, #0]
 80006cc:	6800      	ldr	r0, [r0, #0]
 80006ce:	f380 8808 	msr	MSP, r0
 80006d2:	b662      	cpsie	i
 80006d4:	b661      	cpsie	f
 80006d6:	f3bf 8f4f 	dsb	sy
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	df00      	svc	0
 80006e0:	bf00      	nop
 80006e2:	0000      	.short	0x0000
 80006e4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop

080006ec <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <xPortStartScheduler+0x38>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <xPortStartScheduler+0x38>)
 80006f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80006fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <xPortStartScheduler+0x38>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a08      	ldr	r2, [pc, #32]	; (8000724 <xPortStartScheduler+0x38>)
 8000702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000706:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000708:	f000 f890 	bl	800082c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <xPortStartScheduler+0x3c>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000712:	f7ff ffd9 	bl	80006c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000716:	f000 fc7b 	bl	8001010 <vTaskSwitchContext>
    prvTaskExitError();
 800071a:	f7ff ffa7 	bl	800066c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	bd80      	pop	{r7, pc}
 8000724:	e000ed20 	.word	0xe000ed20
 8000728:	20000000 	.word	0x20000000

0800072c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
        __asm volatile
 8000732:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000736:	f383 8811 	msr	BASEPRI, r3
 800073a:	f3bf 8f6f 	isb	sy
 800073e:	f3bf 8f4f 	dsb	sy
 8000742:	607b      	str	r3, [r7, #4]
    }
 8000744:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <vPortEnterCritical+0x30>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <vPortEnterCritical+0x30>)
 800074e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000000 	.word	0x20000000

08000760 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <vPortExitCritical+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3b01      	subs	r3, #1
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <vPortExitCritical+0x30>)
 800076e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <vPortExitCritical+0x30>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d105      	bne.n	8000784 <vPortExitCritical+0x24>
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000782:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000
	...

080007a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80007a0:	f3ef 8009 	mrs	r0, PSP
 80007a4:	f3bf 8f6f 	isb	sy
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <pxCurrentTCBConst>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007b0:	6010      	str	r0, [r2, #0]
 80007b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80007b6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80007ba:	f380 8811 	msr	BASEPRI, r0
 80007be:	f000 fc27 	bl	8001010 <vTaskSwitchContext>
 80007c2:	f04f 0000 	mov.w	r0, #0
 80007c6:	f380 8811 	msr	BASEPRI, r0
 80007ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	6808      	ldr	r0, [r1, #0]
 80007d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007d6:	f380 8809 	msr	PSP, r0
 80007da:	f3bf 8f6f 	isb	sy
 80007de:	4770      	bx	lr

080007e0 <pxCurrentTCBConst>:
 80007e0:	20002844 	.word	0x20002844
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop

080007e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
        __asm volatile
 80007ee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	607b      	str	r3, [r7, #4]
    }
 8000800:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000802:	f000 faff 	bl	8000e04 <xTaskIncrementTick>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d003      	beq.n	8000814 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SysTick_Handler+0x40>)
 800080e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	f383 8811 	msr	BASEPRI, r3
    }
 800081e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	e000ed04 	.word	0xe000ed04

0800082c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <vPortSetupTimerInterrupt+0x28>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <vPortSetupTimerInterrupt+0x2c>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <vPortSetupTimerInterrupt+0x30>)
 800083e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000842:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <vPortSetupTimerInterrupt+0x28>)
 8000846:	2207      	movs	r2, #7
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010
 8000858:	e000e018 	.word	0xe000e018
 800085c:	e000e014 	.word	0xe000e014

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000896:	b580      	push	{r7, lr}
 8000898:	b08c      	sub	sp, #48	; 0x30
 800089a:	af04      	add	r7, sp, #16
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4613      	mov	r3, r2
 80008a4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fc50 	bl	8000150 <pvPortMalloc>
 80008b0:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00e      	beq.n	80008d6 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80008b8:	205c      	movs	r0, #92	; 0x5c
 80008ba:	f7ff fc49 	bl	8000150 <pvPortMalloc>
 80008be:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d003      	beq.n	80008ce <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
 80008cc:	e005      	b.n	80008da <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff fcec 	bl	80002ac <vPortFree>
 80008d4:	e001      	b.n	80008da <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d013      	beq.n	8000908 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80008e0:	88fa      	ldrh	r2, [r7, #6]
 80008e2:	2300      	movs	r3, #0
 80008e4:	9303      	str	r3, [sp, #12]
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f000 f80e 	bl	8000918 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80008fc:	69f8      	ldr	r0, [r7, #28]
 80008fe:	f000 f891 	bl	8000a24 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	e002      	b.n	800090e <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800090e:	69bb      	ldr	r3, [r7, #24]
    }
 8000910:	4618      	mov	r0, r3
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	461a      	mov	r2, r3
 8000930:	21a5      	movs	r1, #165	; 0xa5
 8000932:	f000 fd2d 	bl	8001390 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000940:	3b01      	subs	r3, #1
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	f023 0307 	bic.w	r3, r3, #7
 800094e:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d01f      	beq.n	8000996 <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e012      	b.n	8000982 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4413      	add	r3, r2
 8000962:	7819      	ldrb	r1, [r3, #0]
 8000964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	4413      	add	r3, r2
 800096a:	3334      	adds	r3, #52	; 0x34
 800096c:	460a      	mov	r2, r1
 800096e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d006      	beq.n	800098a <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d9e9      	bls.n	800095c <prvInitialiseNewTask+0x44>
 8000988:	e000      	b.n	800098c <prvInitialiseNewTask+0x74>
            {
                break;
 800098a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000994:	e003      	b.n	800099e <prvInitialiseNewTask+0x86>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	2b05      	cmp	r3, #5
 80009a2:	d901      	bls.n	80009a8 <prvInitialiseNewTask+0x90>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80009a4:	2305      	movs	r3, #5
 80009a6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80009a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009aa:	6a3a      	ldr	r2, [r7, #32]
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	6a3a      	ldr	r2, [r7, #32]
 80009b2:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	2200      	movs	r2, #0
 80009b8:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	3304      	adds	r3, #4
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fd8d 	bl	80004de <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80009c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c6:	3318      	adds	r3, #24
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd88 	bl	80004de <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009d2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	f1c3 0206 	rsb	r2, r3, #6
 80009da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009dc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80009de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	3354      	adds	r3, #84	; 0x54
 80009e8:	2204      	movs	r2, #4
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fccf 	bl	8001390 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	3358      	adds	r3, #88	; 0x58
 80009f6:	2201      	movs	r2, #1
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fcc8 	bl	8001390 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	68f9      	ldr	r1, [r7, #12]
 8000a04:	6938      	ldr	r0, [r7, #16]
 8000a06:	f7ff fe05 	bl	8000614 <pxPortInitialiseStack>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a1a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a2c:	f7ff fe7e 	bl	800072c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a30:	4b40      	ldr	r3, [pc, #256]	; (8000b34 <prvAddNewTaskToReadyList+0x110>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	4a3f      	ldr	r2, [pc, #252]	; (8000b34 <prvAddNewTaskToReadyList+0x110>)
 8000a38:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000a3a:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <prvAddNewTaskToReadyList+0x114>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d109      	bne.n	8000a56 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a42:	4a3d      	ldr	r2, [pc, #244]	; (8000b38 <prvAddNewTaskToReadyList+0x114>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <prvAddNewTaskToReadyList+0x110>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d110      	bne.n	8000a72 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a50:	f000 fb3c 	bl	80010cc <prvInitialiseTaskLists>
 8000a54:	e00d      	b.n	8000a72 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <prvAddNewTaskToReadyList+0x118>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d109      	bne.n	8000a72 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <prvAddNewTaskToReadyList+0x114>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d802      	bhi.n	8000a72 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000a6c:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <prvAddNewTaskToReadyList+0x114>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000a72:	4b33      	ldr	r3, [pc, #204]	; (8000b40 <prvAddNewTaskToReadyList+0x11c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <prvAddNewTaskToReadyList+0x11c>)
 8000a7a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <prvAddNewTaskToReadyList+0x11c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a88:	2201      	movs	r2, #1
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <prvAddNewTaskToReadyList+0x120>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	4a2c      	ldr	r2, [pc, #176]	; (8000b44 <prvAddNewTaskToReadyList+0x120>)
 8000a94:	6013      	str	r3, [r2, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9a:	492b      	ldr	r1, [pc, #172]	; (8000b48 <prvAddNewTaskToReadyList+0x124>)
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	3204      	adds	r2, #4
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	1d1a      	adds	r2, r3, #4
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <prvAddNewTaskToReadyList+0x124>)
 8000ada:	441a      	add	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae4:	4918      	ldr	r1, [pc, #96]	; (8000b48 <prvAddNewTaskToReadyList+0x124>)
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	440b      	add	r3, r1
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1c59      	adds	r1, r3, #1
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <prvAddNewTaskToReadyList+0x124>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	4413      	add	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4403      	add	r3, r0
 8000b00:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b02:	f7ff fe2d 	bl	8000760 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <prvAddNewTaskToReadyList+0x118>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00e      	beq.n	8000b2c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <prvAddNewTaskToReadyList+0x114>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <prvAddNewTaskToReadyList+0x128>)
 8000b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	f3bf 8f4f 	dsb	sy
 8000b28:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20002930 	.word	0x20002930
 8000b38:	20002844 	.word	0x20002844
 8000b3c:	2000293c 	.word	0x2000293c
 8000b40:	2000294c 	.word	0x2000294c
 8000b44:	20002938 	.word	0x20002938
 8000b48:	20002848 	.word	0x20002848
 8000b4c:	e000ed04 	.word	0xe000ed04

08000b50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d008      	beq.n	8000b74 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8000b62:	f000 f855 	bl	8000c10 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b66:	2100      	movs	r1, #0
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 fb47 	bl	80011fc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000b6e:	f000 f85d 	bl	8000c2c <xTaskResumeAll>
 8000b72:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d107      	bne.n	8000b8a <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <vTaskDelay+0x44>)
 8000b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	f3bf 8f4f 	dsb	sy
 8000b86:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	e000ed04 	.word	0xe000ed04

08000b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <vTaskStartScheduler+0x5c>)
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bac:	4912      	ldr	r1, [pc, #72]	; (8000bf8 <vTaskStartScheduler+0x60>)
 8000bae:	4813      	ldr	r0, [pc, #76]	; (8000bfc <vTaskStartScheduler+0x64>)
 8000bb0:	f7ff fe71 	bl	8000896 <xTaskCreate>
 8000bb4:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d115      	bne.n	8000be8 <vTaskStartScheduler+0x50>
        __asm volatile
 8000bbc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000bc0:	f383 8811 	msr	BASEPRI, r3
 8000bc4:	f3bf 8f6f 	isb	sy
 8000bc8:	f3bf 8f4f 	dsb	sy
 8000bcc:	603b      	str	r3, [r7, #0]
    }
 8000bce:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <vTaskStartScheduler+0x68>)
 8000bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <vTaskStartScheduler+0x6c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <vTaskStartScheduler+0x70>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000be4:	f7ff fd82 	bl	80006ec <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <vTaskStartScheduler+0x74>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20002954 	.word	0x20002954
 8000bf8:	080013c0 	.word	0x080013c0
 8000bfc:	0800109d 	.word	0x0800109d
 8000c00:	20002950 	.word	0x20002950
 8000c04:	2000293c 	.word	0x2000293c
 8000c08:	20002934 	.word	0x20002934
 8000c0c:	20000004 	.word	0x20000004

08000c10 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <vTaskSuspendAll+0x18>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <vTaskSuspendAll+0x18>)
 8000c1c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20002958 	.word	0x20002958

08000c2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c3a:	f7ff fd77 	bl	800072c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c3e:	4b68      	ldr	r3, [pc, #416]	; (8000de0 <xTaskResumeAll+0x1b4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	4a66      	ldr	r2, [pc, #408]	; (8000de0 <xTaskResumeAll+0x1b4>)
 8000c46:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c48:	4b65      	ldr	r3, [pc, #404]	; (8000de0 <xTaskResumeAll+0x1b4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f040 80c0 	bne.w	8000dd2 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c52:	4b64      	ldr	r3, [pc, #400]	; (8000de4 <xTaskResumeAll+0x1b8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 80bb 	beq.w	8000dd2 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c5c:	e08a      	b.n	8000d74 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c5e:	4b62      	ldr	r3, [pc, #392]	; (8000de8 <xTaskResumeAll+0x1bc>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	6a12      	ldr	r2, [r2, #32]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	69d2      	ldr	r2, [r2, #28]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3318      	adds	r3, #24
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d103      	bne.n	8000c94 <xTaskResumeAll+0x68>
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	6a1a      	ldr	r2, [r3, #32]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	68d2      	ldr	r2, [r2, #12]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	6892      	ldr	r2, [r2, #8]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d103      	bne.n	8000cd2 <xTaskResumeAll+0xa6>
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <xTaskResumeAll+0x1c0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	4a3e      	ldr	r2, [pc, #248]	; (8000dec <xTaskResumeAll+0x1c0>)
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	493d      	ldr	r1, [pc, #244]	; (8000df0 <xTaskResumeAll+0x1c4>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	440b      	add	r3, r1
 8000d04:	3304      	adds	r3, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	3204      	adds	r2, #4
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	1d1a      	adds	r2, r3, #4
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4a2e      	ldr	r2, [pc, #184]	; (8000df0 <xTaskResumeAll+0x1c4>)
 8000d38:	441a      	add	r2, r3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d42:	492b      	ldr	r1, [pc, #172]	; (8000df0 <xTaskResumeAll+0x1c4>)
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c59      	adds	r1, r3, #1
 8000d52:	4827      	ldr	r0, [pc, #156]	; (8000df0 <xTaskResumeAll+0x1c4>)
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4403      	add	r3, r0
 8000d5e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <xTaskResumeAll+0x1c8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d302      	bcc.n	8000d74 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <xTaskResumeAll+0x1cc>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <xTaskResumeAll+0x1bc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f47f af70 	bne.w	8000c5e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000d84:	f000 fa20 	bl	80011c8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <xTaskResumeAll+0x1d0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d010      	beq.n	8000db6 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000d94:	f000 f836 	bl	8000e04 <xTaskIncrementTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <xTaskResumeAll+0x1cc>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f1      	bne.n	8000d94 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <xTaskResumeAll+0x1d0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <xTaskResumeAll+0x1cc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d009      	beq.n	8000dd2 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <xTaskResumeAll+0x1d4>)
 8000dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	f3bf 8f4f 	dsb	sy
 8000dce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000dd2:	f7ff fcc5 	bl	8000760 <vPortExitCritical>

    return xAlreadyYielded;
 8000dd6:	693b      	ldr	r3, [r7, #16]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20002958 	.word	0x20002958
 8000de4:	20002930 	.word	0x20002930
 8000de8:	200028f0 	.word	0x200028f0
 8000dec:	20002938 	.word	0x20002938
 8000df0:	20002848 	.word	0x20002848
 8000df4:	20002844 	.word	0x20002844
 8000df8:	20002944 	.word	0x20002944
 8000dfc:	20002940 	.word	0x20002940
 8000e00:	e000ed04 	.word	0xe000ed04

08000e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e0e:	4b75      	ldr	r3, [pc, #468]	; (8000fe4 <xTaskIncrementTick+0x1e0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 80dc 	bne.w	8000fd0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000e18:	4b73      	ldr	r3, [pc, #460]	; (8000fe8 <xTaskIncrementTick+0x1e4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000e20:	4a71      	ldr	r2, [pc, #452]	; (8000fe8 <xTaskIncrementTick+0x1e4>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d110      	bne.n	8000e4e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000e2c:	4b6f      	ldr	r3, [pc, #444]	; (8000fec <xTaskIncrementTick+0x1e8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	4b6f      	ldr	r3, [pc, #444]	; (8000ff0 <xTaskIncrementTick+0x1ec>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a6d      	ldr	r2, [pc, #436]	; (8000fec <xTaskIncrementTick+0x1e8>)
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4a6d      	ldr	r2, [pc, #436]	; (8000ff0 <xTaskIncrementTick+0x1ec>)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <xTaskIncrementTick+0x1f0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a6b      	ldr	r2, [pc, #428]	; (8000ff4 <xTaskIncrementTick+0x1f0>)
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	f000 f9bd 	bl	80011c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <xTaskIncrementTick+0x1f4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f0c0 80a6 	bcc.w	8000fa6 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e5a:	4b64      	ldr	r3, [pc, #400]	; (8000fec <xTaskIncrementTick+0x1e8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d104      	bne.n	8000e6e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e64:	4b64      	ldr	r3, [pc, #400]	; (8000ff8 <xTaskIncrementTick+0x1f4>)
 8000e66:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6a:	601a      	str	r2, [r3, #0]
                    break;
 8000e6c:	e09b      	b.n	8000fa6 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e6e:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <xTaskIncrementTick+0x1e8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d203      	bcs.n	8000e8e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000e86:	4a5c      	ldr	r2, [pc, #368]	; (8000ff8 <xTaskIncrementTick+0x1f4>)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000e8c:	e08b      	b.n	8000fa6 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	68d2      	ldr	r2, [r2, #12]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	6892      	ldr	r2, [r2, #8]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	3304      	adds	r3, #4
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d103      	bne.n	8000ebc <xTaskIncrementTick+0xb8>
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d01e      	beq.n	8000f12 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	6a12      	ldr	r2, [r2, #32]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	69d2      	ldr	r2, [r2, #28]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	3318      	adds	r3, #24
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d103      	bne.n	8000f02 <xTaskIncrementTick+0xfe>
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6a1a      	ldr	r2, [r3, #32]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	2201      	movs	r2, #1
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <xTaskIncrementTick+0x1f8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <xTaskIncrementTick+0x1f8>)
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f28:	4935      	ldr	r1, [pc, #212]	; (8001000 <xTaskIncrementTick+0x1fc>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	3304      	adds	r3, #4
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	3204      	adds	r2, #4
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1d1a      	adds	r2, r3, #4
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4a26      	ldr	r2, [pc, #152]	; (8001000 <xTaskIncrementTick+0x1fc>)
 8000f68:	441a      	add	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f72:	4923      	ldr	r1, [pc, #140]	; (8001000 <xTaskIncrementTick+0x1fc>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1c59      	adds	r1, r3, #1
 8000f82:	481f      	ldr	r0, [pc, #124]	; (8001000 <xTaskIncrementTick+0x1fc>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4403      	add	r3, r0
 8000f8e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <xTaskIncrementTick+0x200>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	f4ff af5d 	bcc.w	8000e5a <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fa4:	e759      	b.n	8000e5a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <xTaskIncrementTick+0x200>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fac:	4914      	ldr	r1, [pc, #80]	; (8001000 <xTaskIncrementTick+0x1fc>)
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d901      	bls.n	8000fc2 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <xTaskIncrementTick+0x204>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d007      	beq.n	8000fda <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e004      	b.n	8000fda <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <xTaskIncrementTick+0x208>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4a0d      	ldr	r2, [pc, #52]	; (800100c <xTaskIncrementTick+0x208>)
 8000fd8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000fda:	69fb      	ldr	r3, [r7, #28]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20002958 	.word	0x20002958
 8000fe8:	20002934 	.word	0x20002934
 8000fec:	200028e8 	.word	0x200028e8
 8000ff0:	200028ec 	.word	0x200028ec
 8000ff4:	20002948 	.word	0x20002948
 8000ff8:	20002950 	.word	0x20002950
 8000ffc:	20002938 	.word	0x20002938
 8001000:	20002848 	.word	0x20002848
 8001004:	20002844 	.word	0x20002844
 8001008:	20002944 	.word	0x20002944
 800100c:	20002940 	.word	0x20002940

08001010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <vTaskSwitchContext+0x78>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <vTaskSwitchContext+0x7c>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001024:	e02a      	b.n	800107c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <vTaskSwitchContext+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <vTaskSwitchContext+0x80>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	f1c3 031f 	rsb	r3, r3, #31
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4a11      	ldr	r2, [pc, #68]	; (8001094 <vTaskSwitchContext+0x84>)
 800104e:	4413      	add	r3, r2
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3308      	adds	r3, #8
 8001064:	429a      	cmp	r2, r3
 8001066:	d104      	bne.n	8001072 <vTaskSwitchContext+0x62>
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <vTaskSwitchContext+0x88>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20002958 	.word	0x20002958
 800108c:	20002944 	.word	0x20002944
 8001090:	20002938 	.word	0x20002938
 8001094:	20002848 	.word	0x20002848
 8001098:	20002844 	.word	0x20002844

0800109c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80010a4:	f000 f852 	bl	800114c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <prvIdleTask+0x28>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d9f9      	bls.n	80010a4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <prvIdleTask+0x2c>)
 80010b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80010c0:	e7f0      	b.n	80010a4 <prvIdleTask+0x8>
 80010c2:	bf00      	nop
 80010c4:	20002848 	.word	0x20002848
 80010c8:	e000ed04 	.word	0xe000ed04

080010cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	e00c      	b.n	80010f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <prvInitialiseTaskLists+0x60>)
 80010e4:	4413      	add	r3, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9da 	bl	80004a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3301      	adds	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d9ef      	bls.n	80010d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <prvInitialiseTaskLists+0x64>)
 80010fa:	f7ff f9d1 	bl	80004a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <prvInitialiseTaskLists+0x68>)
 8001100:	f7ff f9ce 	bl	80004a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <prvInitialiseTaskLists+0x6c>)
 8001106:	f7ff f9cb 	bl	80004a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <prvInitialiseTaskLists+0x70>)
 800110c:	f7ff f9c8 	bl	80004a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <prvInitialiseTaskLists+0x74>)
 8001112:	f7ff f9c5 	bl	80004a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <prvInitialiseTaskLists+0x78>)
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <prvInitialiseTaskLists+0x64>)
 800111a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <prvInitialiseTaskLists+0x7c>)
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <prvInitialiseTaskLists+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20002848 	.word	0x20002848
 8001130:	200028c0 	.word	0x200028c0
 8001134:	200028d4 	.word	0x200028d4
 8001138:	200028f0 	.word	0x200028f0
 800113c:	20002904 	.word	0x20002904
 8001140:	2000291c 	.word	0x2000291c
 8001144:	200028e8 	.word	0x200028e8
 8001148:	200028ec 	.word	0x200028ec

0800114c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001152:	e019      	b.n	8001188 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001154:	f7ff faea 	bl	800072c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <prvCheckTasksWaitingTermination+0x50>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9fe 	bl	8000566 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <prvCheckTasksWaitingTermination+0x54>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3b01      	subs	r3, #1
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <prvCheckTasksWaitingTermination+0x54>)
 8001172:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <prvCheckTasksWaitingTermination+0x58>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3b01      	subs	r3, #1
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <prvCheckTasksWaitingTermination+0x58>)
 800117c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800117e:	f7ff faef 	bl	8000760 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f810 	bl	80011a8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <prvCheckTasksWaitingTermination+0x58>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e1      	bne.n	8001154 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20002904 	.word	0x20002904
 80011a0:	20002930 	.word	0x20002930
 80011a4:	20002918 	.word	0x20002918

080011a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f879 	bl	80002ac <vPortFree>
                vPortFree( pxTCB );
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff f876 	bl	80002ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <prvResetNextTaskUnblockTime+0x2c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d104      	bne.n	80011e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <prvResetNextTaskUnblockTime+0x30>)
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80011de:	e005      	b.n	80011ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <prvResetNextTaskUnblockTime+0x2c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <prvResetNextTaskUnblockTime+0x30>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	200028e8 	.word	0x200028e8
 80011f8:	20002950 	.word	0x20002950

080011fc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3304      	adds	r3, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9a7 	bl	8000566 <uxListRemove>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10b      	bne.n	8001236 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	2201      	movs	r2, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <prvAddCurrentTaskToDelayedList+0xec>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4013      	ands	r3, r2
 8001232:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001234:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d124      	bne.n	8001288 <prvAddCurrentTaskToDelayedList+0x8c>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d021      	beq.n	8001288 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	6892      	ldr	r2, [r2, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	3204      	adds	r2, #4
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	1d1a      	adds	r2, r3, #4
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <prvAddCurrentTaskToDelayedList+0xf0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <prvAddCurrentTaskToDelayedList+0xf0>)
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001286:	e026      	b.n	80012d6 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	d209      	bcs.n	80012b4 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3304      	adds	r3, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4610      	mov	r0, r2
 80012ae:	f7ff f922 	bl	80004f6 <vListInsert>
}
 80012b2:	e010      	b.n	80012d6 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <prvAddCurrentTaskToDelayedList+0xf8>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3304      	adds	r3, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4610      	mov	r0, r2
 80012c2:	f7ff f918 	bl	80004f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d202      	bcs.n	80012d6 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80012d0:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20002934 	.word	0x20002934
 80012e4:	20002844 	.word	0x20002844
 80012e8:	20002938 	.word	0x20002938
 80012ec:	2000291c 	.word	0x2000291c
 80012f0:	200028ec 	.word	0x200028ec
 80012f4:	200028e8 	.word	0x200028e8
 80012f8:	20002950 	.word	0x20002950

080012fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001322:	f7ff fab2 	bl	800088a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001326:	f000 f80f 	bl	8001348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132a:	f7ff f95d 	bl	80005e8 <main>
  bx lr
 800132e:	4770      	bx	lr
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001338:	080013d0 	.word	0x080013d0
  ldr r2, =_sbss
 800133c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001340:	2000295c 	.word	0x2000295c

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>
	...

08001348 <__libc_init_array>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	2600      	movs	r6, #0
 800134c:	4d0c      	ldr	r5, [pc, #48]	; (8001380 <__libc_init_array+0x38>)
 800134e:	4c0d      	ldr	r4, [pc, #52]	; (8001384 <__libc_init_array+0x3c>)
 8001350:	1b64      	subs	r4, r4, r5
 8001352:	10a4      	asrs	r4, r4, #2
 8001354:	42a6      	cmp	r6, r4
 8001356:	d109      	bne.n	800136c <__libc_init_array+0x24>
 8001358:	f000 f822 	bl	80013a0 <_init>
 800135c:	2600      	movs	r6, #0
 800135e:	4d0a      	ldr	r5, [pc, #40]	; (8001388 <__libc_init_array+0x40>)
 8001360:	4c0a      	ldr	r4, [pc, #40]	; (800138c <__libc_init_array+0x44>)
 8001362:	1b64      	subs	r4, r4, r5
 8001364:	10a4      	asrs	r4, r4, #2
 8001366:	42a6      	cmp	r6, r4
 8001368:	d105      	bne.n	8001376 <__libc_init_array+0x2e>
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001370:	4798      	blx	r3
 8001372:	3601      	adds	r6, #1
 8001374:	e7ee      	b.n	8001354 <__libc_init_array+0xc>
 8001376:	f855 3b04 	ldr.w	r3, [r5], #4
 800137a:	4798      	blx	r3
 800137c:	3601      	adds	r6, #1
 800137e:	e7f2      	b.n	8001366 <__libc_init_array+0x1e>
 8001380:	080013c8 	.word	0x080013c8
 8001384:	080013c8 	.word	0x080013c8
 8001388:	080013c8 	.word	0x080013c8
 800138c:	080013cc 	.word	0x080013cc

08001390 <memset>:
 8001390:	4603      	mov	r3, r0
 8001392:	4402      	add	r2, r0
 8001394:	4293      	cmp	r3, r2
 8001396:	d100      	bne.n	800139a <memset+0xa>
 8001398:	4770      	bx	lr
 800139a:	f803 1b01 	strb.w	r1, [r3], #1
 800139e:	e7f9      	b.n	8001394 <memset+0x4>

080013a0 <_init>:
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	bf00      	nop
 80013a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a6:	bc08      	pop	{r3}
 80013a8:	469e      	mov	lr, r3
 80013aa:	4770      	bx	lr

080013ac <_fini>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	bf00      	nop
 80013b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	469e      	mov	lr, r3
 80013b6:	4770      	bx	lr
