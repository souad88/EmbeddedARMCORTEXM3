
USART1_SEND_STRING_PROJ_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000334  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000450  08000450  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000450  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000458  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800045c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800045c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e08  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000051d  00000000  00000000  00020e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015216  00000000  00000000  000216c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001dfe  00000000  00000000  000368d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007af9d  00000000  00000000  000386d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3671  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005bc  00000000  00000000  000b36c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000004 	.word	0x20000004
 800012c:	00000000 	.word	0x00000000
 8000130:	0800042c 	.word	0x0800042c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000008 	.word	0x20000008
 800014c:	0800042c 	.word	0x0800042c

08000150 <__aeabi_d2uiz>:
 8000150:	004a      	lsls	r2, r1, #1
 8000152:	d211      	bcs.n	8000178 <__aeabi_d2uiz+0x28>
 8000154:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000158:	d211      	bcs.n	800017e <__aeabi_d2uiz+0x2e>
 800015a:	d50d      	bpl.n	8000178 <__aeabi_d2uiz+0x28>
 800015c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000160:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000164:	d40e      	bmi.n	8000184 <__aeabi_d2uiz+0x34>
 8000166:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800016a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800016e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000172:	fa23 f002 	lsr.w	r0, r3, r2
 8000176:	4770      	bx	lr
 8000178:	f04f 0000 	mov.w	r0, #0
 800017c:	4770      	bx	lr
 800017e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000182:	d102      	bne.n	800018a <__aeabi_d2uiz+0x3a>
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	4770      	bx	lr
 800018a:	f04f 0000 	mov.w	r0, #0
 800018e:	4770      	bx	lr

08000190 <LED_INIT>:
#define  FOS 8000000
#define  BAUD 9600


void LED_INIT()
	{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
		RCC->APB2ENR|=(1<<4); //ENABLE PORT C
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LED_INIT+0x20>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a05      	ldr	r2, [pc, #20]	; (80001b0 <LED_INIT+0x20>)
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6193      	str	r3, [r2, #24]
		GPIOC->CRH=0X00000300;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <LED_INIT+0x24>)
 80001a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80001a6:	605a      	str	r2, [r3, #4]

	}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	40021000 	.word	0x40021000
 80001b4:	40011000 	.word	0x40011000

080001b8 <LED_ON>:
void LED_ON()
	{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
		GPIOC->ODR=(1<<13);
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <LED_ON+0x14>)
 80001be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001c2:	60da      	str	r2, [r3, #12]
	}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	40011000 	.word	0x40011000

080001d0 <LED_OF>:
void LED_OF()
	{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
		GPIOC->ODR&=~(1<<13);
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <LED_OF+0x18>)
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <LED_OF+0x18>)
 80001da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001de:	60d3      	str	r3, [r2, #12]
	}
 80001e0:	bf00      	nop
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	40011000 	.word	0x40011000
 80001ec:	00000000 	.word	0x00000000

080001f0 <main>:
int main(void)
{
 80001f0:	b590      	push	{r4, r7, lr}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
	    void LED_INIT();
	    void LED_ON();
	    void LED_OF();
	    void store_char_(char);
	    void send_string(char*);
	    LED_INIT();
 80001f6:	f7ff ffcb 	bl	8000190 <LED_INIT>
	    RCC->APB2ENR |=(1<<14);
 80001fa:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <main+0xb0>)
 80001fc:	699b      	ldr	r3, [r3, #24]
 80001fe:	4a28      	ldr	r2, [pc, #160]	; (80002a0 <main+0xb0>)
 8000200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000204:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |=(1<<2);
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <main+0xb0>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a25      	ldr	r2, [pc, #148]	; (80002a0 <main+0xb0>)
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |=(1<<0);
 8000212:	4b23      	ldr	r3, [pc, #140]	; (80002a0 <main+0xb0>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	4a22      	ldr	r2, [pc, #136]	; (80002a0 <main+0xb0>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6193      	str	r3, [r2, #24]

	    GPIOA->CRH=(0X0B<<4);
 800021e:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <main+0xb4>)
 8000220:	22b0      	movs	r2, #176	; 0xb0
 8000222:	605a      	str	r2, [r3, #4]
	    GPIOA->CRH=(4<<8);
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <main+0xb4>)
 8000226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800022a:	605a      	str	r2, [r3, #4]

	    USART1->CR1 |=(1<<13);
 800022c:	4b1e      	ldr	r3, [pc, #120]	; (80002a8 <main+0xb8>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <main+0xb8>)
 8000232:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000236:	60d3      	str	r3, [r2, #12]
	    USART1->CR1 |=(1<<2);
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <main+0xb8>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <main+0xb8>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	60d3      	str	r3, [r2, #12]
	    USART1->CR1 |=(1<<3);
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <main+0xb8>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <main+0xb8>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	60d3      	str	r3, [r2, #12]

	    double USART_BAUD_RATE=FOS/BAUD;
 8000250:	a311      	add	r3, pc, #68	; (adr r3, 8000298 <main+0xa8>)
 8000252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000256:	e9c7 2302 	strd	r2, r3, [r7, #8]
	    USART1->BRR = USART_BAUD_RATE;
 800025a:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <main+0xb8>)
 800025c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000260:	f7ff ff76 	bl	8000150 <__aeabi_d2uiz>
 8000264:	4603      	mov	r3, r0
 8000266:	60a3      	str	r3, [r4, #8]
	    unsigned char buffer_d=USART1->DR&0x00FF;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <main+0xb8>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	71fb      	strb	r3, [r7, #7]

	    while (1)
			{
	    			while(!(USART1->SR&1<<5));
 800026e:	bf00      	nop
 8000270:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <main+0xb8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	2b00      	cmp	r3, #0
 800027a:	d0f9      	beq.n	8000270 <main+0x80>
	    			if(buffer_d=='w')
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	2b77      	cmp	r3, #119	; 0x77
 8000280:	d105      	bne.n	800028e <main+0x9e>
	    				{

	    					LED_ON();
 8000282:	f7ff ff99 	bl	80001b8 <LED_ON>
	    					send_string("LED IS ON");
 8000286:	4809      	ldr	r0, [pc, #36]	; (80002ac <main+0xbc>)
 8000288:	f000 f82a 	bl	80002e0 <send_string>
 800028c:	e7ef      	b.n	800026e <main+0x7e>
	    				}
	    			else
	    				{
	    					LED_OF();
 800028e:	f7ff ff9f 	bl	80001d0 <LED_OF>
	    			while(!(USART1->SR&1<<5));
 8000292:	e7ec      	b.n	800026e <main+0x7e>
 8000294:	f3af 8000 	nop.w
 8000298:	00000000 	.word	0x00000000
 800029c:	408a0800 	.word	0x408a0800
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40013800 	.word	0x40013800
 80002ac:	08000444 	.word	0x08000444

080002b0 <store_char_>:


	}

void store_char_(char data)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	USART1->DR=data&0xFF;
 80002ba:	4a08      	ldr	r2, [pc, #32]	; (80002dc <store_char_+0x2c>)
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	6053      	str	r3, [r2, #4]
	while(!(USART1->SR & 1<<7));
 80002c0:	bf00      	nop
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <store_char_+0x2c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <store_char_+0x12>

}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40013800 	.word	0x40013800

080002e0 <send_string>:
void send_string(char *data)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	int i=0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
	while(data[i]!='\0') //+i if data not equal null
 80002ec:	e009      	b.n	8000302 <send_string+0x22>
	{
      store_char_(data[i]);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	4413      	add	r3, r2
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffda 	bl	80002b0 <store_char_>
	//USART1->DR=data&0xFF;
	//while(!(USART1->SR & 1<<7));
	  i++;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	3301      	adds	r3, #1
 8000300:	60fb      	str	r3, [r7, #12]
	while(data[i]!='\0') //+i if data not equal null
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	4413      	add	r3, r2
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1ef      	bne.n	80002ee <send_string+0xe>
	}

}
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800031c:	e7fe      	b.n	800031c <NMI_Handler+0x4>

0800031e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <HardFault_Handler+0x4>

08000324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <MemManage_Handler+0x4>

0800032a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <BusFault_Handler+0x4>

08000330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <UsageFault_Handler+0x4>

08000336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr

08000342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr

0800034e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr

0800035a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800035e:	f000 f82f 	bl	80003c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}

08000366 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
	...

08000374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800039a:	f7ff ffe4 	bl	8000366 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800039e:	f000 f821 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ff25 	bl	80001f0 <main>
  bx lr
 80003a6:	4770      	bx	lr
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003b0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003b4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b8:	20000024 	.word	0x20000024

080003bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC1_2_IRQHandler>
	...

080003c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <HAL_IncTick+0x1c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	461a      	mov	r2, r3
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <HAL_IncTick+0x20>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4413      	add	r3, r2
 80003d0:	4a03      	ldr	r2, [pc, #12]	; (80003e0 <HAL_IncTick+0x20>)
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000020 	.word	0x20000020

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	2600      	movs	r6, #0
 80003e8:	4d0c      	ldr	r5, [pc, #48]	; (800041c <__libc_init_array+0x38>)
 80003ea:	4c0d      	ldr	r4, [pc, #52]	; (8000420 <__libc_init_array+0x3c>)
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	f000 f81a 	bl	800042c <_init>
 80003f8:	2600      	movs	r6, #0
 80003fa:	4d0a      	ldr	r5, [pc, #40]	; (8000424 <__libc_init_array+0x40>)
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <__libc_init_array+0x44>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000450 	.word	0x08000450
 8000420:	08000450 	.word	0x08000450
 8000424:	08000450 	.word	0x08000450
 8000428:	08000454 	.word	0x08000454

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
