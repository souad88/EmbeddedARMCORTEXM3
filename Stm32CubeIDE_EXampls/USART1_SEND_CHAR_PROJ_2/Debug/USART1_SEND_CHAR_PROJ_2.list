
USART1_SEND_CHAR_PROJ_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003f8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003fc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003fc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d7e  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000049e  00000000  00000000  00020dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00021250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015216  00000000  00000000  00021598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001db3  00000000  00000000  000367ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007af82  00000000  00000000  00038561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b34e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  000b3534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000004 	.word	0x20000004
 800012c:	00000000 	.word	0x00000000
 8000130:	080003d8 	.word	0x080003d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000008 	.word	0x20000008
 800014c:	080003d8 	.word	0x080003d8

08000150 <__aeabi_d2uiz>:
 8000150:	004a      	lsls	r2, r1, #1
 8000152:	d211      	bcs.n	8000178 <__aeabi_d2uiz+0x28>
 8000154:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000158:	d211      	bcs.n	800017e <__aeabi_d2uiz+0x2e>
 800015a:	d50d      	bpl.n	8000178 <__aeabi_d2uiz+0x28>
 800015c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000160:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000164:	d40e      	bmi.n	8000184 <__aeabi_d2uiz+0x34>
 8000166:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800016a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800016e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000172:	fa23 f002 	lsr.w	r0, r3, r2
 8000176:	4770      	bx	lr
 8000178:	f04f 0000 	mov.w	r0, #0
 800017c:	4770      	bx	lr
 800017e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000182:	d102      	bne.n	800018a <__aeabi_d2uiz+0x3a>
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	4770      	bx	lr
 800018a:	f04f 0000 	mov.w	r0, #0
 800018e:	4770      	bx	lr

08000190 <LED_INIT>:

#include "main.h"

void LED_INIT()
{	//LED ON P-C13
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	RCC->APB2ENR|=(1<<4);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LED_INIT+0x20>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a05      	ldr	r2, [pc, #20]	; (80001b0 <LED_INIT+0x20>)
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6193      	str	r3, [r2, #24]
	GPIOC->CRH=0X00000300;//0011;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <LED_INIT+0x24>)
 80001a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80001a6:	605a      	str	r2, [r3, #4]
}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	40021000 	.word	0x40021000
 80001b4:	40011000 	.word	0x40011000

080001b8 <LED_ON>:

void LED_ON()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	GPIOC->ODR=(1<<13);
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <LED_ON+0x14>)
 80001be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001c2:	60da      	str	r2, [r3, #12]
}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	40011000 	.word	0x40011000

080001d0 <LED_OF>:
void LED_OF()
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	GPIOC->ODR&=~(1<<13);
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <LED_OF+0x18>)
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <LED_OF+0x18>)
 80001da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001de:	60d3      	str	r3, [r2, #12]
}
 80001e0:	bf00      	nop
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	40011000 	.word	0x40011000
 80001ec:	00000000 	.word	0x00000000

080001f0 <main>:
void SystemClock_Config(void);

# define FOSC 8000000
# define BAUD 9600
int main(void)
{
 80001f0:	b590      	push	{r4, r7, lr}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
	void LED_INIT();
	void LED_ON();
	void LED_OF();
    LED_INIT();
 80001f6:	f7ff ffcb 	bl	8000190 <LED_INIT>
    //ENABLE USART-PORT-PINS (PA9-PA10-ALTERNATIVE FUNCTION BIT-USART_1_PIN_CLOCK)
    RCC->APB2ENR |=(1<<2);//ENABLE PORT A FOR PA-9,PA-10
 80001fa:	4b2f      	ldr	r3, [pc, #188]	; (80002b8 <main+0xc8>)
 80001fc:	699b      	ldr	r3, [r3, #24]
 80001fe:	4a2e      	ldr	r2, [pc, #184]	; (80002b8 <main+0xc8>)
 8000200:	f043 0304 	orr.w	r3, r3, #4
 8000204:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |=(1<<0);//ENABLE ALTERNATE FUNCTION
 8000206:	4b2c      	ldr	r3, [pc, #176]	; (80002b8 <main+0xc8>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a2b      	ldr	r2, [pc, #172]	; (80002b8 <main+0xc8>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |=(1<14);//ENABLE USART_1 CLOCK
 8000212:	4b29      	ldr	r3, [pc, #164]	; (80002b8 <main+0xc8>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	4a28      	ldr	r2, [pc, #160]	; (80002b8 <main+0xc8>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6193      	str	r3, [r2, #24]
    GPIOA->CRH |=(0X0B<<4) ;//PA-9 TX OUTPUT 1011 =B IN HEX
 800021e:	4b27      	ldr	r3, [pc, #156]	; (80002bc <main+0xcc>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	4a26      	ldr	r2, [pc, #152]	; (80002bc <main+0xcc>)
 8000224:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000228:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=(4<<8);//PA-10 RX INPUT 0100=4 IN HEX
 800022a:	4b24      	ldr	r3, [pc, #144]	; (80002bc <main+0xcc>)
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	4a23      	ldr	r2, [pc, #140]	; (80002bc <main+0xcc>)
 8000230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000234:	6053      	str	r3, [r2, #4]
    //CONTROL USART REGISTERS (CR1-CR2-CR3-SR-DR)
    //CR1
    USART1->CR1 |=(1<<13);//USART_BIT_ENABLE
 8000236:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <main+0xd0>)
 8000238:	68db      	ldr	r3, [r3, #12]
 800023a:	4a21      	ldr	r2, [pc, #132]	; (80002c0 <main+0xd0>)
 800023c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000240:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |=(1<<3);//ENABLE TRANSMIT
 8000242:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <main+0xd0>)
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	4a1e      	ldr	r2, [pc, #120]	; (80002c0 <main+0xd0>)
 8000248:	f043 0308 	orr.w	r3, r3, #8
 800024c:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |=(1<<2);//ENABLE RECEIVE
 800024e:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <main+0xd0>)
 8000250:	68db      	ldr	r3, [r3, #12]
 8000252:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <main+0xd0>)
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	60d3      	str	r3, [r2, #12]
    //BAUD RATE
    double usart_BAUD_RATE=FOSC/BAUD;
 800025a:	a315      	add	r3, pc, #84	; (adr r3, 80002b0 <main+0xc0>)
 800025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000260:	e9c7 2302 	strd	r2, r3, [r7, #8]
    USART1->BRR=usart_BAUD_RATE;
 8000264:	4c16      	ldr	r4, [pc, #88]	; (80002c0 <main+0xd0>)
 8000266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800026a:	f7ff ff71 	bl	8000150 <__aeabi_d2uiz>
 800026e:	4603      	mov	r3, r0
 8000270:	60a3      	str	r3, [r4, #8]
    ////
    //define storage
    unsigned char buffer_data=USART1->DR&0X00FF;
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <main+0xd0>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	71fb      	strb	r3, [r7, #7]

    while (1)
    {

    		while(!(USART1->SR&1<<5)); //WHILE RECIEVER_BUFFER IS EMPTY READ DATA AND STORE IT
 8000278:	bf00      	nop
 800027a:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <main+0xd0>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 0320 	and.w	r3, r3, #32
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <main+0x8a>
    		if(buffer_data=='w')
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	2b77      	cmp	r3, #119	; 0x77
 800028a:	d10c      	bne.n	80002a6 <main+0xb6>
    			{
    				LED_ON();
 800028c:	f7ff ff94 	bl	80001b8 <LED_ON>
    				USART1->DR=0XFF&'M'; //SEND CHAR 'M'
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <main+0xd0>)
 8000292:	224d      	movs	r2, #77	; 0x4d
 8000294:	605a      	str	r2, [r3, #4]
    				while(!(USART1->SR&1<<7)) ; //STILL IN THIS DUMMY LOOP WHILE TRANSMITION IS NOT COMPLETE
 8000296:	bf00      	nop
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <main+0xd0>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f9      	beq.n	8000298 <main+0xa8>
 80002a4:	e7e8      	b.n	8000278 <main+0x88>
    			}
    		else
    			{

    				LED_OF();
 80002a6:	f7ff ff93 	bl	80001d0 <LED_OF>
    		while(!(USART1->SR&1<<5)); //WHILE RECIEVER_BUFFER IS EMPTY READ DATA AND STORE IT
 80002aa:	e7e5      	b.n	8000278 <main+0x88>
 80002ac:	f3af 8000 	nop.w
 80002b0:	00000000 	.word	0x00000000
 80002b4:	408a0800 	.word	0x408a0800
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40010800 	.word	0x40010800
 80002c0:	40013800 	.word	0x40013800

080002c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <NMI_Handler+0x4>

080002ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <HardFault_Handler+0x4>

080002d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <MemManage_Handler+0x4>

080002d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002da:	e7fe      	b.n	80002da <BusFault_Handler+0x4>

080002dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <UsageFault_Handler+0x4>

080002e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr

080002ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr

080002fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800030a:	f000 f82f 	bl	800036c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}

08000312 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
	...

08000320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000346:	f7ff ffe4 	bl	8000312 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800034a:	f000 f821 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ff4f 	bl	80001f0 <main>
  bx lr
 8000352:	4770      	bx	lr
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800035c:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 8000360:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000364:	20000024 	.word	0x20000024

08000368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC1_2_IRQHandler>
	...

0800036c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <HAL_IncTick+0x1c>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <HAL_IncTick+0x20>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4413      	add	r3, r2
 800037c:	4a03      	ldr	r2, [pc, #12]	; (800038c <HAL_IncTick+0x20>)
 800037e:	6013      	str	r3, [r2, #0]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	20000000 	.word	0x20000000
 800038c:	20000020 	.word	0x20000020

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	2600      	movs	r6, #0
 8000394:	4d0c      	ldr	r5, [pc, #48]	; (80003c8 <__libc_init_array+0x38>)
 8000396:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	f000 f81a 	bl	80003d8 <_init>
 80003a4:	2600      	movs	r6, #0
 80003a6:	4d0a      	ldr	r5, [pc, #40]	; (80003d0 <__libc_init_array+0x40>)
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <__libc_init_array+0x44>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
