
USART1_RECEIVE_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003d0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003d4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003d4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d88  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a7  00000000  00000000  00020db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00021260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015216  00000000  00000000  000215a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d9c  00000000  00000000  000367be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007af82  00000000  00000000  0003855a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b34dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  000b352c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000004 	.word	0x20000004
 800012c:	00000000 	.word	0x00000000
 8000130:	080003b0 	.word	0x080003b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000008 	.word	0x20000008
 800014c:	080003b0 	.word	0x080003b0

08000150 <__aeabi_d2uiz>:
 8000150:	004a      	lsls	r2, r1, #1
 8000152:	d211      	bcs.n	8000178 <__aeabi_d2uiz+0x28>
 8000154:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000158:	d211      	bcs.n	800017e <__aeabi_d2uiz+0x2e>
 800015a:	d50d      	bpl.n	8000178 <__aeabi_d2uiz+0x28>
 800015c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000160:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000164:	d40e      	bmi.n	8000184 <__aeabi_d2uiz+0x34>
 8000166:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800016a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800016e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000172:	fa23 f002 	lsr.w	r0, r3, r2
 8000176:	4770      	bx	lr
 8000178:	f04f 0000 	mov.w	r0, #0
 800017c:	4770      	bx	lr
 800017e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000182:	d102      	bne.n	800018a <__aeabi_d2uiz+0x3a>
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	4770      	bx	lr
 800018a:	f04f 0000 	mov.w	r0, #0
 800018e:	4770      	bx	lr

08000190 <LED_INIT>:
#include "main.h"

void SystemClock_Config(void);
//enable port and initialization led ON PORT-C-
void LED_INIT()
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
		RCC->APB2ENR=(1<<4);
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <LED_INIT+0x1c>)
 8000196:	2210      	movs	r2, #16
 8000198:	619a      	str	r2, [r3, #24]
		GPIOC->CRH=(3<<20);//CNF_OUTPUT:00 MOD:11->0011=3
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <LED_INIT+0x20>)
 800019c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80001a0:	605a      	str	r2, [r3, #4]

}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	40021000 	.word	0x40021000
 80001b0:	40011000 	.word	0x40011000

080001b4 <LED_ON>:
///
void LED_ON()
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
		GPIOC->ODR=(1<<13);
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <LED_ON+0x14>)
 80001ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001be:	60da      	str	r2, [r3, #12]
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40011000 	.word	0x40011000

080001cc <LED_OF>:
void LED_OF()
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
		GPIOC->ODR &=~(1<<13);
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <LED_OF+0x18>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <LED_OF+0x18>)
 80001d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001da:	60d3      	str	r3, [r2, #12]
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	40011000 	.word	0x40011000

080001e8 <main>:
#define FOSC 8000000
#define BAUD_RATE 9600
int main(void)
{
 80001e8:	b590      	push	{r4, r7, lr}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
  void LED_INIT();
  void LED_ON();
  void LED_OF();
  LED_INIT();
 80001ee:	f7ff ffcf 	bl	8000190 <LED_INIT>
  //ENABLE PORT-A FOR [PA9,PA10] THAT  USART(IN [MCU]) WILL TRANSIMT TX AND RECIEVE FROM BLUTOOTH OR USB
  RCC->APB2ENR|=(1<<2);
 80001f2:	4b27      	ldr	r3, [pc, #156]	; (8000290 <main+0xa8>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a26      	ldr	r2, [pc, #152]	; (8000290 <main+0xa8>)
 80001f8:	f043 0304 	orr.w	r3, r3, #4
 80001fc:	6193      	str	r3, [r2, #24]
  //ENABLE USART_1->->AFIOEN ALTERNATE FUNCTION ENABLE ON BIT 0,
  RCC->APB2ENR|=(1<<0);
 80001fe:	4b24      	ldr	r3, [pc, #144]	; (8000290 <main+0xa8>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	4a23      	ldr	r2, [pc, #140]	; (8000290 <main+0xa8>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	6193      	str	r3, [r2, #24]
  //ENABLE CLOCK ON USART_1->USART1EN ON BIT 14
  RCC->APB2ENR|=(1<<14);
 800020a:	4b21      	ldr	r3, [pc, #132]	; (8000290 <main+0xa8>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	4a20      	ldr	r2, [pc, #128]	; (8000290 <main+0xa8>)
 8000210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000214:	6193      	str	r3, [r2, #24]

  //-----------------------------------------------
  //GENERAL PURPOSE INPUT OUPUT GPIOX-[CRL&CRH]
  //PA9->TX //OUTPUT ALTERNATE FUNCTION
  GPIOA->CRH=(0X0B<<4); //CNF 10 MOD 11->1011=B IN HEX
 8000216:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <main+0xac>)
 8000218:	22b0      	movs	r2, #176	; 0xb0
 800021a:	605a      	str	r2, [r3, #4]
  //PA10->RX//INPUT
  GPIOA->CRH=(4<<8); //CNF 01 MOD 00->0100=4 IN HEX
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <main+0xac>)
 800021e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000222:	605a      	str	r2, [r3, #4]
  //MANEGING THE USART_1 SETTINGS(BRR,ENABLE TRANSMIT,ENABLE RECIEVE)
  //1-ENABLE UE BIT13
  USART1->CR1 |=(1<<13);
 8000224:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <main+0xb0>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <main+0xb0>)
 800022a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800022e:	60d3      	str	r3, [r2, #12]
  //2-ENABLE TRANSMITION
  USART1->CR1 |=(1<<3);
 8000230:	4b19      	ldr	r3, [pc, #100]	; (8000298 <main+0xb0>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a18      	ldr	r2, [pc, #96]	; (8000298 <main+0xb0>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	60d3      	str	r3, [r2, #12]
  //3-ENABLE RECEIVE
  USART1->CR1 |=(1<<2);
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <main+0xb0>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a15      	ldr	r2, [pc, #84]	; (8000298 <main+0xb0>)
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	60d3      	str	r3, [r2, #12]
//BAUD RATE REGISTER
  double USART_DIV=FOSC/BAUD_RATE;
 8000248:	a30f      	add	r3, pc, #60	; (adr r3, 8000288 <main+0xa0>)
 800024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800024e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  USART1->BRR=USART_DIV;
 8000252:	4c11      	ldr	r4, [pc, #68]	; (8000298 <main+0xb0>)
 8000254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000258:	f7ff ff7a 	bl	8000150 <__aeabi_d2uiz>
 800025c:	4603      	mov	r3, r0
 800025e:	60a3      	str	r3, [r4, #8]
  //CHECK(STATUS OF RECIEVE)STATUS_REGISTER IF BIT=0 THEN RECIEVE DATA AND STORE IT IF BIT=1 THEN STILL IN THIS
  //DUMMY LOOP UNTILL IT IS EMPTY BIT=0 THEN READ THE BUFFER
  while (1)
    {
	  	  unsigned buffer_data=USART1->DR&0x00FF;//?????INITIALIZTION FOR THE STORE
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <main+0xb0>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	607b      	str	r3, [r7, #4]
	  	  while(!(USART1->SR&1<<5));
 8000268:	bf00      	nop
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <main+0xb0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <main+0x82>
	  	  if(buffer_data=='w')
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b77      	cmp	r3, #119	; 0x77
 800027a:	d102      	bne.n	8000282 <main+0x9a>
	  	  {

	  		  LED_ON();
 800027c:	f7ff ff9a 	bl	80001b4 <LED_ON>
 8000280:	e7ee      	b.n	8000260 <main+0x78>

           }
	  	  else
	  	  {
	  		  LED_OF();
 8000282:	f7ff ffa3 	bl	80001cc <LED_OF>
    {
 8000286:	e7eb      	b.n	8000260 <main+0x78>
 8000288:	00000000 	.word	0x00000000
 800028c:	408a0800 	.word	0x408a0800
 8000290:	40021000 	.word	0x40021000
 8000294:	40010800 	.word	0x40010800
 8000298:	40013800 	.word	0x40013800

0800029c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002a0:	e7fe      	b.n	80002a0 <NMI_Handler+0x4>

080002a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <HardFault_Handler+0x4>

080002a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <MemManage_Handler+0x4>

080002ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002b2:	e7fe      	b.n	80002b2 <BusFault_Handler+0x4>

080002b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <UsageFault_Handler+0x4>

080002ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr

080002d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr

080002de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e2:	f000 f82f 	bl	8000344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}

080002ea <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
	...

080002f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800031e:	f7ff ffe4 	bl	80002ea <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000322:	f000 f821 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ff5f 	bl	80001e8 <main>
  bx lr
 800032a:	4770      	bx	lr
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000334:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 8000338:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800033c:	20000024 	.word	0x20000024

08000340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC1_2_IRQHandler>
	...

08000344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <HAL_IncTick+0x1c>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HAL_IncTick+0x20>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4413      	add	r3, r2
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <HAL_IncTick+0x20>)
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	20000000 	.word	0x20000000
 8000364:	20000020 	.word	0x20000020

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	2600      	movs	r6, #0
 800036c:	4d0c      	ldr	r5, [pc, #48]	; (80003a0 <__libc_init_array+0x38>)
 800036e:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	f000 f81a 	bl	80003b0 <_init>
 800037c:	2600      	movs	r6, #0
 800037e:	4d0a      	ldr	r5, [pc, #40]	; (80003a8 <__libc_init_array+0x40>)
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <__libc_init_array+0x44>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
